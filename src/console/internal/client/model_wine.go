/*
API for ppo project

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Wine type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Wine{}

// Wine struct for Wine
type Wine struct {
	Id       string `json:"id"`
	Name     string `json:"name"`
	Count    string `json:"count"`
	Year     int32  `json:"year"`
	Strength int32  `json:"strength"`
	Price    string `json:"price"`
	Type     string `json:"type"`
}

// NewWine instantiates a new Wine object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWine(id string, name string, count string, year int32, strength int32, price string, type_ string) *Wine {
	this := Wine{}
	this.Id = id
	this.Name = name
	this.Count = count
	this.Year = year
	this.Strength = strength
	this.Price = price
	this.Type = type_
	return &this
}

// NewWineWithDefaults instantiates a new Wine object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWineWithDefaults() *Wine {
	this := Wine{}
	return &this
}

// GetId returns the Id field value
func (o *Wine) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Wine) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Wine) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *Wine) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Wine) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Wine) SetName(v string) {
	o.Name = v
}

// GetCount returns the Count field value
func (o *Wine) GetCount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *Wine) GetCountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *Wine) SetCount(v string) {
	o.Count = v
}

// GetYear returns the Year field value
func (o *Wine) GetYear() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Year
}

// GetYearOk returns a tuple with the Year field value
// and a boolean to check if the value has been set.
func (o *Wine) GetYearOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Year, true
}

// SetYear sets field value
func (o *Wine) SetYear(v int32) {
	o.Year = v
}

// GetStrength returns the Strength field value
func (o *Wine) GetStrength() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Strength
}

// GetStrengthOk returns a tuple with the Strength field value
// and a boolean to check if the value has been set.
func (o *Wine) GetStrengthOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Strength, true
}

// SetStrength sets field value
func (o *Wine) SetStrength(v int32) {
	o.Strength = v
}

// GetPrice returns the Price field value
func (o *Wine) GetPrice() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Price
}

// GetPriceOk returns a tuple with the Price field value
// and a boolean to check if the value has been set.
func (o *Wine) GetPriceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Price, true
}

// SetPrice sets field value
func (o *Wine) SetPrice(v string) {
	o.Price = v
}

// GetType returns the Type field value
func (o *Wine) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Wine) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Wine) SetType(v string) {
	o.Type = v
}

func (o Wine) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Wine) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["count"] = o.Count
	toSerialize["year"] = o.Year
	toSerialize["strength"] = o.Strength
	toSerialize["price"] = o.Price
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

type NullableWine struct {
	value *Wine
	isSet bool
}

func (v NullableWine) Get() *Wine {
	return v.value
}

func (v *NullableWine) Set(val *Wine) {
	v.value = val
	v.isSet = true
}

func (v NullableWine) IsSet() bool {
	return v.isSet
}

func (v *NullableWine) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWine(val *Wine) *NullableWine {
	return &NullableWine{value: val, isSet: true}
}

func (v NullableWine) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWine) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
