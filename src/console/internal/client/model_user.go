/*
API for ppo project

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the User type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &User{}

// User struct for User
type User struct {
	Id            string `json:"id"`
	Login         string `json:"login"`
	Password      string `json:"password"`
	Fio           string `json:"fio"`
	Email         string `json:"email"`
	Points        string `json:"points"`
	Status        string `json:"status"`
	CntFavourites string `json:"cntFavourites"`
}

// NewUser instantiates a new User object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUser(id string, login string, password string, fio string, email string, points string, status string, cntFavourites string) *User {
	this := User{}
	this.Id = id
	this.Login = login
	this.Password = password
	this.Fio = fio
	this.Email = email
	this.Points = points
	this.Status = status
	this.CntFavourites = cntFavourites
	return &this
}

// NewUserWithDefaults instantiates a new User object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserWithDefaults() *User {
	this := User{}
	return &this
}

// GetId returns the Id field value
func (o *User) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *User) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *User) SetId(v string) {
	o.Id = v
}

// GetLogin returns the Login field value
func (o *User) GetLogin() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Login
}

// GetLoginOk returns a tuple with the Login field value
// and a boolean to check if the value has been set.
func (o *User) GetLoginOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Login, true
}

// SetLogin sets field value
func (o *User) SetLogin(v string) {
	o.Login = v
}

// GetPassword returns the Password field value
func (o *User) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *User) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *User) SetPassword(v string) {
	o.Password = v
}

// GetFio returns the Fio field value
func (o *User) GetFio() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Fio
}

// GetFioOk returns a tuple with the Fio field value
// and a boolean to check if the value has been set.
func (o *User) GetFioOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fio, true
}

// SetFio sets field value
func (o *User) SetFio(v string) {
	o.Fio = v
}

// GetEmail returns the Email field value
func (o *User) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *User) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *User) SetEmail(v string) {
	o.Email = v
}

// GetPoints returns the Points field value
func (o *User) GetPoints() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Points
}

// GetPointsOk returns a tuple with the Points field value
// and a boolean to check if the value has been set.
func (o *User) GetPointsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Points, true
}

// SetPoints sets field value
func (o *User) SetPoints(v string) {
	o.Points = v
}

// GetStatus returns the Status field value
func (o *User) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *User) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *User) SetStatus(v string) {
	o.Status = v
}

// GetCntFavourites returns the CntFavourites field value
func (o *User) GetCntFavourites() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CntFavourites
}

// GetCntFavouritesOk returns a tuple with the CntFavourites field value
// and a boolean to check if the value has been set.
func (o *User) GetCntFavouritesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CntFavourites, true
}

// SetCntFavourites sets field value
func (o *User) SetCntFavourites(v string) {
	o.CntFavourites = v
}

func (o User) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o User) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["login"] = o.Login
	toSerialize["password"] = o.Password
	toSerialize["fio"] = o.Fio
	toSerialize["email"] = o.Email
	toSerialize["points"] = o.Points
	toSerialize["status"] = o.Status
	toSerialize["cntFavourites"] = o.CntFavourites
	return toSerialize, nil
}

type NullableUser struct {
	value *User
	isSet bool
}

func (v NullableUser) Get() *User {
	return v.value
}

func (v *NullableUser) Set(val *User) {
	v.value = val
	v.isSet = true
}

func (v NullableUser) IsSet() bool {
	return v.isSet
}

func (v *NullableUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUser(val *User) *NullableUser {
	return &NullableUser{value: val, isSet: true}
}

func (v NullableUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
