/*
API for ppo project

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Elem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Elem{}

// Elem struct for Elem
type Elem struct {
	Id      string `json:"id"`
	IdOrder string `json:"idOrder"`
	IdWine  string `json:"idWine"`
	Count   int32  `json:"count"`
}

// NewElem instantiates a new Elem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewElem(id string, idOrder string, idWine string, count int32) *Elem {
	this := Elem{}
	this.Id = id
	this.IdOrder = idOrder
	this.IdWine = idWine
	this.Count = count
	return &this
}

// NewElemWithDefaults instantiates a new Elem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewElemWithDefaults() *Elem {
	this := Elem{}
	return &this
}

// GetId returns the Id field value
func (o *Elem) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Elem) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Elem) SetId(v string) {
	o.Id = v
}

// GetIdOrder returns the IdOrder field value
func (o *Elem) GetIdOrder() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IdOrder
}

// GetIdOrderOk returns a tuple with the IdOrder field value
// and a boolean to check if the value has been set.
func (o *Elem) GetIdOrderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IdOrder, true
}

// SetIdOrder sets field value
func (o *Elem) SetIdOrder(v string) {
	o.IdOrder = v
}

// GetIdWine returns the IdWine field value
func (o *Elem) GetIdWine() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IdWine
}

// GetIdWineOk returns a tuple with the IdWine field value
// and a boolean to check if the value has been set.
func (o *Elem) GetIdWineOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IdWine, true
}

// SetIdWine sets field value
func (o *Elem) SetIdWine(v string) {
	o.IdWine = v
}

// GetCount returns the Count field value
func (o *Elem) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *Elem) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *Elem) SetCount(v int32) {
	o.Count = v
}

func (o Elem) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Elem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["idOrder"] = o.IdOrder
	toSerialize["idWine"] = o.IdWine
	toSerialize["count"] = o.Count
	return toSerialize, nil
}

type NullableElem struct {
	value *Elem
	isSet bool
}

func (v NullableElem) Get() *Elem {
	return v.value
}

func (v *NullableElem) Set(val *Elem) {
	v.value = val
	v.isSet = true
}

func (v NullableElem) IsSet() bool {
	return v.isSet
}

func (v *NullableElem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableElem(val *Elem) *NullableElem {
	return &NullableElem{value: val, isSet: true}
}

func (v NullableElem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableElem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
