/*
API for ppo project

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RegisterResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegisterResponse{}

// RegisterResponse struct for RegisterResponse
type RegisterResponse struct {
	Registered bool `json:"registered"`
}

// NewRegisterResponse instantiates a new RegisterResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegisterResponse(registered bool) *RegisterResponse {
	this := RegisterResponse{}
	this.Registered = registered
	return &this
}

// NewRegisterResponseWithDefaults instantiates a new RegisterResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegisterResponseWithDefaults() *RegisterResponse {
	this := RegisterResponse{}
	return &this
}

// GetRegistered returns the Registered field value
func (o *RegisterResponse) GetRegistered() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Registered
}

// GetRegisteredOk returns a tuple with the Registered field value
// and a boolean to check if the value has been set.
func (o *RegisterResponse) GetRegisteredOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Registered, true
}

// SetRegistered sets field value
func (o *RegisterResponse) SetRegistered(v bool) {
	o.Registered = v
}

func (o RegisterResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegisterResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["registered"] = o.Registered
	return toSerialize, nil
}

type NullableRegisterResponse struct {
	value *RegisterResponse
	isSet bool
}

func (v NullableRegisterResponse) Get() *RegisterResponse {
	return v.value
}

func (v *NullableRegisterResponse) Set(val *RegisterResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableRegisterResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableRegisterResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegisterResponse(val *RegisterResponse) *NullableRegisterResponse {
	return &NullableRegisterResponse{value: val, isSet: true}
}

func (v NullableRegisterResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegisterResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
