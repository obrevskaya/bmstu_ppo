/*
 * API for ppo project
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// DefaultAPIController binds http requests to an api service and writes the service results to the http response
type DefaultAPIController struct {
	service      DefaultAPIServicer
	errorHandler ErrorHandler
}

// DefaultAPIOption for how the controller is set up.
type DefaultAPIOption func(*DefaultAPIController)

// WithDefaultAPIErrorHandler inject ErrorHandler into controller
func WithDefaultAPIErrorHandler(h ErrorHandler) DefaultAPIOption {
	return func(c *DefaultAPIController) {
		c.errorHandler = h
	}
}

// NewDefaultAPIController creates a default api controller
func NewDefaultAPIController(s DefaultAPIServicer, opts ...DefaultAPIOption) Router {
	controller := &DefaultAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DefaultAPIController
func (c *DefaultAPIController) Routes() Routes {
	return Routes{
		"AddElem": Route{
			strings.ToUpper("Put"),
			"/elems/{id}/add",
			c.AddElem,
		},
		"AddWine": Route{
			strings.ToUpper("Post"),
			"/wines",
			c.AddWine,
		},
		"Authorize": Route{
			strings.ToUpper("Post"),
			"/authorize",
			c.Authorize,
		},
		"CreateElem": Route{
			strings.ToUpper("Post"),
			"/elems",
			c.CreateElem,
		},
		"CreateUserWine": Route{
			strings.ToUpper("Post"),
			"/favourite",
			c.CreateUserWine,
		},
		"DecreaseElem": Route{
			strings.ToUpper("Put"),
			"/elems/{id}/decrease",
			c.DecreaseElem,
		},
		"DeleteElem": Route{
			strings.ToUpper("Delete"),
			"/elems/{id}",
			c.DeleteElem,
		},
		"DeleteUserWine": Route{
			strings.ToUpper("Delete"),
			"/favourite",
			c.DeleteUserWine,
		},
		"DeleteWine": Route{
			strings.ToUpper("Delete"),
			"/wines/{id}",
			c.DeleteWine,
		},
		"GetByOrder": Route{
			strings.ToUpper("Get"),
			"/elems",
			c.GetByOrder,
		},
		"GetOrder": Route{
			strings.ToUpper("Get"),
			"/orders/{id}",
			c.GetOrder,
		},
		"GetOrderByUser": Route{
			strings.ToUpper("Get"),
			"/orders",
			c.GetOrderByUser,
		},
		"GetUser": Route{
			strings.ToUpper("Get"),
			"/users/{id}",
			c.GetUser,
		},
		"GetUserWines": Route{
			strings.ToUpper("Get"),
			"/favourite/{id}",
			c.GetUserWines,
		},
		"GetWine": Route{
			strings.ToUpper("Get"),
			"/wines/{id}",
			c.GetWine,
		},
		"GetWines": Route{
			strings.ToUpper("Get"),
			"/wines",
			c.GetWines,
		},
		"PayBill": Route{
			strings.ToUpper("Put"),
			"/bills/{id}",
			c.PayBill,
		},
		"PlaceOrder": Route{
			strings.ToUpper("Put"),
			"/orders",
			c.PlaceOrder,
		},
		"Register": Route{
			strings.ToUpper("Post"),
			"/register",
			c.Register,
		},
		"UpdatePoints": Route{
			strings.ToUpper("Put"),
			"/users",
			c.UpdatePoints,
		},
		"UpdateWine": Route{
			strings.ToUpper("Put"),
			"/wines",
			c.UpdateWine,
		},
	}
}

// AddElem -
func (c *DefaultAPIController) AddElem(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	result, err := c.service.AddElem(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AddWine -
func (c *DefaultAPIController) AddWine(w http.ResponseWriter, r *http.Request) {
	addWineRequestParam := AddWineRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&addWineRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAddWineRequestRequired(addWineRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAddWineRequestConstraints(addWineRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AddWine(r.Context(), addWineRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// Authorize -
func (c *DefaultAPIController) Authorize(w http.ResponseWriter, r *http.Request) {
	authRequestParam := AuthRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&authRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAuthRequestRequired(authRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAuthRequestConstraints(authRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.Authorize(r.Context(), authRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateElem -
func (c *DefaultAPIController) CreateElem(w http.ResponseWriter, r *http.Request) {
	createElemRequestParam := CreateElemRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createElemRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateElemRequestRequired(createElemRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateElemRequestConstraints(createElemRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateElem(r.Context(), createElemRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateUserWine -
func (c *DefaultAPIController) CreateUserWine(w http.ResponseWriter, r *http.Request) {
	userWineParam := UserWine{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&userWineParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUserWineRequired(userWineParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUserWineConstraints(userWineParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateUserWine(r.Context(), userWineParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DecreaseElem -
func (c *DefaultAPIController) DecreaseElem(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	result, err := c.service.DecreaseElem(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteElem -
func (c *DefaultAPIController) DeleteElem(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	result, err := c.service.DeleteElem(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteUserWine -
func (c *DefaultAPIController) DeleteUserWine(w http.ResponseWriter, r *http.Request) {
	userWineParam := UserWine{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&userWineParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUserWineRequired(userWineParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUserWineConstraints(userWineParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.DeleteUserWine(r.Context(), userWineParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteWine -
func (c *DefaultAPIController) DeleteWine(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	result, err := c.service.DeleteWine(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetByOrder -
func (c *DefaultAPIController) GetByOrder(w http.ResponseWriter, r *http.Request) {
	getByOrderRequestParam := GetByOrderRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&getByOrderRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGetByOrderRequestRequired(getByOrderRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGetByOrderRequestConstraints(getByOrderRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.GetByOrder(r.Context(), getByOrderRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetOrder -
func (c *DefaultAPIController) GetOrder(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	result, err := c.service.GetOrder(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetOrderByUser -
func (c *DefaultAPIController) GetOrderByUser(w http.ResponseWriter, r *http.Request) {
	getOrderByUserRequestParam := GetOrderByUserRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&getOrderByUserRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGetOrderByUserRequestRequired(getOrderByUserRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGetOrderByUserRequestConstraints(getOrderByUserRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.GetOrderByUser(r.Context(), getOrderByUserRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetUser -
func (c *DefaultAPIController) GetUser(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	result, err := c.service.GetUser(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetUserWines -
func (c *DefaultAPIController) GetUserWines(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	result, err := c.service.GetUserWines(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetWine -
func (c *DefaultAPIController) GetWine(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	result, err := c.service.GetWine(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetWines -
func (c *DefaultAPIController) GetWines(w http.ResponseWriter, r *http.Request) {
	getWinesRequestParam := GetWinesRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&getWinesRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGetWinesRequestRequired(getWinesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGetWinesRequestConstraints(getWinesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.GetWines(r.Context(), getWinesRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PayBill -
func (c *DefaultAPIController) PayBill(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	result, err := c.service.PayBill(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PlaceOrder -
func (c *DefaultAPIController) PlaceOrder(w http.ResponseWriter, r *http.Request) {
	orderParam := Order{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&orderParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertOrderRequired(orderParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertOrderConstraints(orderParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PlaceOrder(r.Context(), orderParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// Register -
func (c *DefaultAPIController) Register(w http.ResponseWriter, r *http.Request) {
	registerRequestParam := RegisterRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&registerRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRegisterRequestRequired(registerRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertRegisterRequestConstraints(registerRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.Register(r.Context(), registerRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdatePoints -
func (c *DefaultAPIController) UpdatePoints(w http.ResponseWriter, r *http.Request) {
	updatePointsRequestParam := UpdatePointsRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&updatePointsRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUpdatePointsRequestRequired(updatePointsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUpdatePointsRequestConstraints(updatePointsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdatePoints(r.Context(), updatePointsRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateWine -
func (c *DefaultAPIController) UpdateWine(w http.ResponseWriter, r *http.Request) {
	wineParam := Wine{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&wineParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertWineRequired(wineParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertWineConstraints(wineParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateWine(r.Context(), wineParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
