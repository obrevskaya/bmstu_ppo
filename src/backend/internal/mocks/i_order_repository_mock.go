package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i git.iu7.bmstu.ru/ovv20u676/ppo/src/internal/interfaces.IOrderRepository -o ../mocks/i_order_repository_mock_test.go -n IOrderRepositoryMock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"git.iu7.bmstu.ru/ovv20u676/ppo/src/backend/internal/logic/models"

	"github.com/gojuno/minimock/v3"
	"github.com/google/uuid"
)

// IOrderRepositoryMock implements interfaces.IOrderRepository
type IOrderRepositoryMock struct {
	t minimock.Tester

	funcDelete          func(ctx context.Context, ID uuid.UUID) (err error)
	inspectFuncDelete   func(ctx context.Context, ID uuid.UUID)
	afterDeleteCounter  uint64
	beforeDeleteCounter uint64
	DeleteMock          mIOrderRepositoryMockDelete

	funcGet          func(ctx context.Context, ID uuid.UUID) (op1 *models.Order, err error)
	inspectFuncGet   func(ctx context.Context, ID uuid.UUID)
	afterGetCounter  uint64
	beforeGetCounter uint64
	GetMock          mIOrderRepositoryMockGet

	funcGetByUserInProcess          func(ctx context.Context, ID uuid.UUID) (op1 *models.Order, err error)
	inspectFuncGetByUserInProcess   func(ctx context.Context, ID uuid.UUID)
	afterGetByUserInProcessCounter  uint64
	beforeGetByUserInProcessCounter uint64
	GetByUserInProcessMock          mIOrderRepositoryMockGetByUserInProcess

	funcInsert          func(ctx context.Context, order *models.Order) (err error)
	inspectFuncInsert   func(ctx context.Context, order *models.Order)
	afterInsertCounter  uint64
	beforeInsertCounter uint64
	InsertMock          mIOrderRepositoryMockInsert

	funcUpdate          func(ctx context.Context, order *models.Order) (err error)
	inspectFuncUpdate   func(ctx context.Context, order *models.Order)
	afterUpdateCounter  uint64
	beforeUpdateCounter uint64
	UpdateMock          mIOrderRepositoryMockUpdate
}

// NewIOrderRepositoryMock returns a mock for interfaces.IOrderRepository
func NewIOrderRepositoryMock(t minimock.Tester) *IOrderRepositoryMock {
	m := &IOrderRepositoryMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.DeleteMock = mIOrderRepositoryMockDelete{mock: m}
	m.DeleteMock.callArgs = []*IOrderRepositoryMockDeleteParams{}

	m.GetMock = mIOrderRepositoryMockGet{mock: m}
	m.GetMock.callArgs = []*IOrderRepositoryMockGetParams{}

	m.GetByUserInProcessMock = mIOrderRepositoryMockGetByUserInProcess{mock: m}
	m.GetByUserInProcessMock.callArgs = []*IOrderRepositoryMockGetByUserInProcessParams{}

	m.InsertMock = mIOrderRepositoryMockInsert{mock: m}
	m.InsertMock.callArgs = []*IOrderRepositoryMockInsertParams{}

	m.UpdateMock = mIOrderRepositoryMockUpdate{mock: m}
	m.UpdateMock.callArgs = []*IOrderRepositoryMockUpdateParams{}

	return m
}

type mIOrderRepositoryMockDelete struct {
	mock               *IOrderRepositoryMock
	defaultExpectation *IOrderRepositoryMockDeleteExpectation
	expectations       []*IOrderRepositoryMockDeleteExpectation

	callArgs []*IOrderRepositoryMockDeleteParams
	mutex    sync.RWMutex
}

// IOrderRepositoryMockDeleteExpectation specifies expectation struct of the IOrderRepository.Delete
type IOrderRepositoryMockDeleteExpectation struct {
	mock    *IOrderRepositoryMock
	params  *IOrderRepositoryMockDeleteParams
	results *IOrderRepositoryMockDeleteResults
	Counter uint64
}

// IOrderRepositoryMockDeleteParams contains parameters of the IOrderRepository.Delete
type IOrderRepositoryMockDeleteParams struct {
	ctx context.Context
	ID  uuid.UUID
}

// IOrderRepositoryMockDeleteResults contains results of the IOrderRepository.Delete
type IOrderRepositoryMockDeleteResults struct {
	err error
}

// Expect sets up expected params for IOrderRepository.Delete
func (mmDelete *mIOrderRepositoryMockDelete) Expect(ctx context.Context, ID uuid.UUID) *mIOrderRepositoryMockDelete {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("IOrderRepositoryMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &IOrderRepositoryMockDeleteExpectation{}
	}

	mmDelete.defaultExpectation.params = &IOrderRepositoryMockDeleteParams{ctx, ID}
	for _, e := range mmDelete.expectations {
		if minimock.Equal(e.params, mmDelete.defaultExpectation.params) {
			mmDelete.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDelete.defaultExpectation.params)
		}
	}

	return mmDelete
}

// Inspect accepts an inspector function that has same arguments as the IOrderRepository.Delete
func (mmDelete *mIOrderRepositoryMockDelete) Inspect(f func(ctx context.Context, ID uuid.UUID)) *mIOrderRepositoryMockDelete {
	if mmDelete.mock.inspectFuncDelete != nil {
		mmDelete.mock.t.Fatalf("Inspect function is already set for IOrderRepositoryMock.Delete")
	}

	mmDelete.mock.inspectFuncDelete = f

	return mmDelete
}

// Return sets up results that will be returned by IOrderRepository.Delete
func (mmDelete *mIOrderRepositoryMockDelete) Return(err error) *IOrderRepositoryMock {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("IOrderRepositoryMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &IOrderRepositoryMockDeleteExpectation{mock: mmDelete.mock}
	}
	mmDelete.defaultExpectation.results = &IOrderRepositoryMockDeleteResults{err}
	return mmDelete.mock
}

// Set uses given function f to mock the IOrderRepository.Delete method
func (mmDelete *mIOrderRepositoryMockDelete) Set(f func(ctx context.Context, ID uuid.UUID) (err error)) *IOrderRepositoryMock {
	if mmDelete.defaultExpectation != nil {
		mmDelete.mock.t.Fatalf("Default expectation is already set for the IOrderRepository.Delete method")
	}

	if len(mmDelete.expectations) > 0 {
		mmDelete.mock.t.Fatalf("Some expectations are already set for the IOrderRepository.Delete method")
	}

	mmDelete.mock.funcDelete = f
	return mmDelete.mock
}

// When sets expectation for the IOrderRepository.Delete which will trigger the result defined by the following
// Then helper
func (mmDelete *mIOrderRepositoryMockDelete) When(ctx context.Context, ID uuid.UUID) *IOrderRepositoryMockDeleteExpectation {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("IOrderRepositoryMock.Delete mock is already set by Set")
	}

	expectation := &IOrderRepositoryMockDeleteExpectation{
		mock:   mmDelete.mock,
		params: &IOrderRepositoryMockDeleteParams{ctx, ID},
	}
	mmDelete.expectations = append(mmDelete.expectations, expectation)
	return expectation
}

// Then sets up IOrderRepository.Delete return parameters for the expectation previously defined by the When method
func (e *IOrderRepositoryMockDeleteExpectation) Then(err error) *IOrderRepositoryMock {
	e.results = &IOrderRepositoryMockDeleteResults{err}
	return e.mock
}

// Delete implements interfaces.IOrderRepository
func (mmDelete *IOrderRepositoryMock) Delete(ctx context.Context, ID uuid.UUID) (err error) {
	mm_atomic.AddUint64(&mmDelete.beforeDeleteCounter, 1)
	defer mm_atomic.AddUint64(&mmDelete.afterDeleteCounter, 1)

	if mmDelete.inspectFuncDelete != nil {
		mmDelete.inspectFuncDelete(ctx, ID)
	}

	mm_params := &IOrderRepositoryMockDeleteParams{ctx, ID}

	// Record call args
	mmDelete.DeleteMock.mutex.Lock()
	mmDelete.DeleteMock.callArgs = append(mmDelete.DeleteMock.callArgs, mm_params)
	mmDelete.DeleteMock.mutex.Unlock()

	for _, e := range mmDelete.DeleteMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmDelete.DeleteMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDelete.DeleteMock.defaultExpectation.Counter, 1)
		mm_want := mmDelete.DeleteMock.defaultExpectation.params
		mm_got := IOrderRepositoryMockDeleteParams{ctx, ID}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDelete.t.Errorf("IOrderRepositoryMock.Delete got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDelete.DeleteMock.defaultExpectation.results
		if mm_results == nil {
			mmDelete.t.Fatal("No results are set for the IOrderRepositoryMock.Delete")
		}
		return (*mm_results).err
	}
	if mmDelete.funcDelete != nil {
		return mmDelete.funcDelete(ctx, ID)
	}
	mmDelete.t.Fatalf("Unexpected call to IOrderRepositoryMock.Delete. %v %v", ctx, ID)
	return
}

// DeleteAfterCounter returns a count of finished IOrderRepositoryMock.Delete invocations
func (mmDelete *IOrderRepositoryMock) DeleteAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDelete.afterDeleteCounter)
}

// DeleteBeforeCounter returns a count of IOrderRepositoryMock.Delete invocations
func (mmDelete *IOrderRepositoryMock) DeleteBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDelete.beforeDeleteCounter)
}

// Calls returns a list of arguments used in each call to IOrderRepositoryMock.Delete.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDelete *mIOrderRepositoryMockDelete) Calls() []*IOrderRepositoryMockDeleteParams {
	mmDelete.mutex.RLock()

	argCopy := make([]*IOrderRepositoryMockDeleteParams, len(mmDelete.callArgs))
	copy(argCopy, mmDelete.callArgs)

	mmDelete.mutex.RUnlock()

	return argCopy
}

// MinimockDeleteDone returns true if the count of the Delete invocations corresponds
// the number of defined expectations
func (m *IOrderRepositoryMock) MinimockDeleteDone() bool {
	for _, e := range m.DeleteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDeleteCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDelete != nil && mm_atomic.LoadUint64(&m.afterDeleteCounter) < 1 {
		return false
	}
	return true
}

// MinimockDeleteInspect logs each unmet expectation
func (m *IOrderRepositoryMock) MinimockDeleteInspect() {
	for _, e := range m.DeleteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to IOrderRepositoryMock.Delete with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDeleteCounter) < 1 {
		if m.DeleteMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to IOrderRepositoryMock.Delete")
		} else {
			m.t.Errorf("Expected call to IOrderRepositoryMock.Delete with params: %#v", *m.DeleteMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDelete != nil && mm_atomic.LoadUint64(&m.afterDeleteCounter) < 1 {
		m.t.Error("Expected call to IOrderRepositoryMock.Delete")
	}
}

type mIOrderRepositoryMockGet struct {
	mock               *IOrderRepositoryMock
	defaultExpectation *IOrderRepositoryMockGetExpectation
	expectations       []*IOrderRepositoryMockGetExpectation

	callArgs []*IOrderRepositoryMockGetParams
	mutex    sync.RWMutex
}

// IOrderRepositoryMockGetExpectation specifies expectation struct of the IOrderRepository.Get
type IOrderRepositoryMockGetExpectation struct {
	mock    *IOrderRepositoryMock
	params  *IOrderRepositoryMockGetParams
	results *IOrderRepositoryMockGetResults
	Counter uint64
}

// IOrderRepositoryMockGetParams contains parameters of the IOrderRepository.Get
type IOrderRepositoryMockGetParams struct {
	ctx context.Context
	ID  uuid.UUID
}

// IOrderRepositoryMockGetResults contains results of the IOrderRepository.Get
type IOrderRepositoryMockGetResults struct {
	op1 *models.Order
	err error
}

// Expect sets up expected params for IOrderRepository.Get
func (mmGet *mIOrderRepositoryMockGet) Expect(ctx context.Context, ID uuid.UUID) *mIOrderRepositoryMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("IOrderRepositoryMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &IOrderRepositoryMockGetExpectation{}
	}

	mmGet.defaultExpectation.params = &IOrderRepositoryMockGetParams{ctx, ID}
	for _, e := range mmGet.expectations {
		if minimock.Equal(e.params, mmGet.defaultExpectation.params) {
			mmGet.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGet.defaultExpectation.params)
		}
	}

	return mmGet
}

// Inspect accepts an inspector function that has same arguments as the IOrderRepository.Get
func (mmGet *mIOrderRepositoryMockGet) Inspect(f func(ctx context.Context, ID uuid.UUID)) *mIOrderRepositoryMockGet {
	if mmGet.mock.inspectFuncGet != nil {
		mmGet.mock.t.Fatalf("Inspect function is already set for IOrderRepositoryMock.Get")
	}

	mmGet.mock.inspectFuncGet = f

	return mmGet
}

// Return sets up results that will be returned by IOrderRepository.Get
func (mmGet *mIOrderRepositoryMockGet) Return(op1 *models.Order, err error) *IOrderRepositoryMock {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("IOrderRepositoryMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &IOrderRepositoryMockGetExpectation{mock: mmGet.mock}
	}
	mmGet.defaultExpectation.results = &IOrderRepositoryMockGetResults{op1, err}
	return mmGet.mock
}

// Set uses given function f to mock the IOrderRepository.Get method
func (mmGet *mIOrderRepositoryMockGet) Set(f func(ctx context.Context, ID uuid.UUID) (op1 *models.Order, err error)) *IOrderRepositoryMock {
	if mmGet.defaultExpectation != nil {
		mmGet.mock.t.Fatalf("Default expectation is already set for the IOrderRepository.Get method")
	}

	if len(mmGet.expectations) > 0 {
		mmGet.mock.t.Fatalf("Some expectations are already set for the IOrderRepository.Get method")
	}

	mmGet.mock.funcGet = f
	return mmGet.mock
}

// When sets expectation for the IOrderRepository.Get which will trigger the result defined by the following
// Then helper
func (mmGet *mIOrderRepositoryMockGet) When(ctx context.Context, ID uuid.UUID) *IOrderRepositoryMockGetExpectation {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("IOrderRepositoryMock.Get mock is already set by Set")
	}

	expectation := &IOrderRepositoryMockGetExpectation{
		mock:   mmGet.mock,
		params: &IOrderRepositoryMockGetParams{ctx, ID},
	}
	mmGet.expectations = append(mmGet.expectations, expectation)
	return expectation
}

// Then sets up IOrderRepository.Get return parameters for the expectation previously defined by the When method
func (e *IOrderRepositoryMockGetExpectation) Then(op1 *models.Order, err error) *IOrderRepositoryMock {
	e.results = &IOrderRepositoryMockGetResults{op1, err}
	return e.mock
}

// Get implements interfaces.IOrderRepository
func (mmGet *IOrderRepositoryMock) Get(ctx context.Context, ID uuid.UUID) (op1 *models.Order, err error) {
	mm_atomic.AddUint64(&mmGet.beforeGetCounter, 1)
	defer mm_atomic.AddUint64(&mmGet.afterGetCounter, 1)

	if mmGet.inspectFuncGet != nil {
		mmGet.inspectFuncGet(ctx, ID)
	}

	mm_params := &IOrderRepositoryMockGetParams{ctx, ID}

	// Record call args
	mmGet.GetMock.mutex.Lock()
	mmGet.GetMock.callArgs = append(mmGet.GetMock.callArgs, mm_params)
	mmGet.GetMock.mutex.Unlock()

	for _, e := range mmGet.GetMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.op1, e.results.err
		}
	}

	if mmGet.GetMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGet.GetMock.defaultExpectation.Counter, 1)
		mm_want := mmGet.GetMock.defaultExpectation.params
		mm_got := IOrderRepositoryMockGetParams{ctx, ID}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGet.t.Errorf("IOrderRepositoryMock.Get got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGet.GetMock.defaultExpectation.results
		if mm_results == nil {
			mmGet.t.Fatal("No results are set for the IOrderRepositoryMock.Get")
		}
		return (*mm_results).op1, (*mm_results).err
	}
	if mmGet.funcGet != nil {
		return mmGet.funcGet(ctx, ID)
	}
	mmGet.t.Fatalf("Unexpected call to IOrderRepositoryMock.Get. %v %v", ctx, ID)
	return
}

// GetAfterCounter returns a count of finished IOrderRepositoryMock.Get invocations
func (mmGet *IOrderRepositoryMock) GetAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.afterGetCounter)
}

// GetBeforeCounter returns a count of IOrderRepositoryMock.Get invocations
func (mmGet *IOrderRepositoryMock) GetBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.beforeGetCounter)
}

// Calls returns a list of arguments used in each call to IOrderRepositoryMock.Get.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGet *mIOrderRepositoryMockGet) Calls() []*IOrderRepositoryMockGetParams {
	mmGet.mutex.RLock()

	argCopy := make([]*IOrderRepositoryMockGetParams, len(mmGet.callArgs))
	copy(argCopy, mmGet.callArgs)

	mmGet.mutex.RUnlock()

	return argCopy
}

// MinimockGetDone returns true if the count of the Get invocations corresponds
// the number of defined expectations
func (m *IOrderRepositoryMock) MinimockGetDone() bool {
	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGet != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetInspect logs each unmet expectation
func (m *IOrderRepositoryMock) MinimockGetInspect() {
	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to IOrderRepositoryMock.Get with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		if m.GetMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to IOrderRepositoryMock.Get")
		} else {
			m.t.Errorf("Expected call to IOrderRepositoryMock.Get with params: %#v", *m.GetMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGet != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		m.t.Error("Expected call to IOrderRepositoryMock.Get")
	}
}

type mIOrderRepositoryMockGetByUserInProcess struct {
	mock               *IOrderRepositoryMock
	defaultExpectation *IOrderRepositoryMockGetByUserInProcessExpectation
	expectations       []*IOrderRepositoryMockGetByUserInProcessExpectation

	callArgs []*IOrderRepositoryMockGetByUserInProcessParams
	mutex    sync.RWMutex
}

// IOrderRepositoryMockGetByUserInProcessExpectation specifies expectation struct of the IOrderRepository.GetByUserInProcess
type IOrderRepositoryMockGetByUserInProcessExpectation struct {
	mock    *IOrderRepositoryMock
	params  *IOrderRepositoryMockGetByUserInProcessParams
	results *IOrderRepositoryMockGetByUserInProcessResults
	Counter uint64
}

// IOrderRepositoryMockGetByUserInProcessParams contains parameters of the IOrderRepository.GetByUserInProcess
type IOrderRepositoryMockGetByUserInProcessParams struct {
	ctx context.Context
	ID  uuid.UUID
}

// IOrderRepositoryMockGetByUserInProcessResults contains results of the IOrderRepository.GetByUserInProcess
type IOrderRepositoryMockGetByUserInProcessResults struct {
	op1 *models.Order
	err error
}

// Expect sets up expected params for IOrderRepository.GetByUserInProcess
func (mmGetByUserInProcess *mIOrderRepositoryMockGetByUserInProcess) Expect(ctx context.Context, ID uuid.UUID) *mIOrderRepositoryMockGetByUserInProcess {
	if mmGetByUserInProcess.mock.funcGetByUserInProcess != nil {
		mmGetByUserInProcess.mock.t.Fatalf("IOrderRepositoryMock.GetByUserInProcess mock is already set by Set")
	}

	if mmGetByUserInProcess.defaultExpectation == nil {
		mmGetByUserInProcess.defaultExpectation = &IOrderRepositoryMockGetByUserInProcessExpectation{}
	}

	mmGetByUserInProcess.defaultExpectation.params = &IOrderRepositoryMockGetByUserInProcessParams{ctx, ID}
	for _, e := range mmGetByUserInProcess.expectations {
		if minimock.Equal(e.params, mmGetByUserInProcess.defaultExpectation.params) {
			mmGetByUserInProcess.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetByUserInProcess.defaultExpectation.params)
		}
	}

	return mmGetByUserInProcess
}

// Inspect accepts an inspector function that has same arguments as the IOrderRepository.GetByUserInProcess
func (mmGetByUserInProcess *mIOrderRepositoryMockGetByUserInProcess) Inspect(f func(ctx context.Context, ID uuid.UUID)) *mIOrderRepositoryMockGetByUserInProcess {
	if mmGetByUserInProcess.mock.inspectFuncGetByUserInProcess != nil {
		mmGetByUserInProcess.mock.t.Fatalf("Inspect function is already set for IOrderRepositoryMock.GetByUserInProcess")
	}

	mmGetByUserInProcess.mock.inspectFuncGetByUserInProcess = f

	return mmGetByUserInProcess
}

// Return sets up results that will be returned by IOrderRepository.GetByUserInProcess
func (mmGetByUserInProcess *mIOrderRepositoryMockGetByUserInProcess) Return(op1 *models.Order, err error) *IOrderRepositoryMock {
	if mmGetByUserInProcess.mock.funcGetByUserInProcess != nil {
		mmGetByUserInProcess.mock.t.Fatalf("IOrderRepositoryMock.GetByUserInProcess mock is already set by Set")
	}

	if mmGetByUserInProcess.defaultExpectation == nil {
		mmGetByUserInProcess.defaultExpectation = &IOrderRepositoryMockGetByUserInProcessExpectation{mock: mmGetByUserInProcess.mock}
	}
	mmGetByUserInProcess.defaultExpectation.results = &IOrderRepositoryMockGetByUserInProcessResults{op1, err}
	return mmGetByUserInProcess.mock
}

// Set uses given function f to mock the IOrderRepository.GetByUserInProcess method
func (mmGetByUserInProcess *mIOrderRepositoryMockGetByUserInProcess) Set(f func(ctx context.Context, ID uuid.UUID) (op1 *models.Order, err error)) *IOrderRepositoryMock {
	if mmGetByUserInProcess.defaultExpectation != nil {
		mmGetByUserInProcess.mock.t.Fatalf("Default expectation is already set for the IOrderRepository.GetByUserInProcess method")
	}

	if len(mmGetByUserInProcess.expectations) > 0 {
		mmGetByUserInProcess.mock.t.Fatalf("Some expectations are already set for the IOrderRepository.GetByUserInProcess method")
	}

	mmGetByUserInProcess.mock.funcGetByUserInProcess = f
	return mmGetByUserInProcess.mock
}

// When sets expectation for the IOrderRepository.GetByUserInProcess which will trigger the result defined by the following
// Then helper
func (mmGetByUserInProcess *mIOrderRepositoryMockGetByUserInProcess) When(ctx context.Context, ID uuid.UUID) *IOrderRepositoryMockGetByUserInProcessExpectation {
	if mmGetByUserInProcess.mock.funcGetByUserInProcess != nil {
		mmGetByUserInProcess.mock.t.Fatalf("IOrderRepositoryMock.GetByUserInProcess mock is already set by Set")
	}

	expectation := &IOrderRepositoryMockGetByUserInProcessExpectation{
		mock:   mmGetByUserInProcess.mock,
		params: &IOrderRepositoryMockGetByUserInProcessParams{ctx, ID},
	}
	mmGetByUserInProcess.expectations = append(mmGetByUserInProcess.expectations, expectation)
	return expectation
}

// Then sets up IOrderRepository.GetByUserInProcess return parameters for the expectation previously defined by the When method
func (e *IOrderRepositoryMockGetByUserInProcessExpectation) Then(op1 *models.Order, err error) *IOrderRepositoryMock {
	e.results = &IOrderRepositoryMockGetByUserInProcessResults{op1, err}
	return e.mock
}

// GetByUserInProcess implements interfaces.IOrderRepository
func (mmGetByUserInProcess *IOrderRepositoryMock) GetByUserInProcess(ctx context.Context, ID uuid.UUID) (op1 *models.Order, err error) {
	mm_atomic.AddUint64(&mmGetByUserInProcess.beforeGetByUserInProcessCounter, 1)
	defer mm_atomic.AddUint64(&mmGetByUserInProcess.afterGetByUserInProcessCounter, 1)

	if mmGetByUserInProcess.inspectFuncGetByUserInProcess != nil {
		mmGetByUserInProcess.inspectFuncGetByUserInProcess(ctx, ID)
	}

	mm_params := &IOrderRepositoryMockGetByUserInProcessParams{ctx, ID}

	// Record call args
	mmGetByUserInProcess.GetByUserInProcessMock.mutex.Lock()
	mmGetByUserInProcess.GetByUserInProcessMock.callArgs = append(mmGetByUserInProcess.GetByUserInProcessMock.callArgs, mm_params)
	mmGetByUserInProcess.GetByUserInProcessMock.mutex.Unlock()

	for _, e := range mmGetByUserInProcess.GetByUserInProcessMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.op1, e.results.err
		}
	}

	if mmGetByUserInProcess.GetByUserInProcessMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetByUserInProcess.GetByUserInProcessMock.defaultExpectation.Counter, 1)
		mm_want := mmGetByUserInProcess.GetByUserInProcessMock.defaultExpectation.params
		mm_got := IOrderRepositoryMockGetByUserInProcessParams{ctx, ID}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetByUserInProcess.t.Errorf("IOrderRepositoryMock.GetByUserInProcess got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetByUserInProcess.GetByUserInProcessMock.defaultExpectation.results
		if mm_results == nil {
			mmGetByUserInProcess.t.Fatal("No results are set for the IOrderRepositoryMock.GetByUserInProcess")
		}
		return (*mm_results).op1, (*mm_results).err
	}
	if mmGetByUserInProcess.funcGetByUserInProcess != nil {
		return mmGetByUserInProcess.funcGetByUserInProcess(ctx, ID)
	}
	mmGetByUserInProcess.t.Fatalf("Unexpected call to IOrderRepositoryMock.GetByUserInProcess. %v %v", ctx, ID)
	return
}

// GetByUserInProcessAfterCounter returns a count of finished IOrderRepositoryMock.GetByUserInProcess invocations
func (mmGetByUserInProcess *IOrderRepositoryMock) GetByUserInProcessAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetByUserInProcess.afterGetByUserInProcessCounter)
}

// GetByUserInProcessBeforeCounter returns a count of IOrderRepositoryMock.GetByUserInProcess invocations
func (mmGetByUserInProcess *IOrderRepositoryMock) GetByUserInProcessBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetByUserInProcess.beforeGetByUserInProcessCounter)
}

// Calls returns a list of arguments used in each call to IOrderRepositoryMock.GetByUserInProcess.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetByUserInProcess *mIOrderRepositoryMockGetByUserInProcess) Calls() []*IOrderRepositoryMockGetByUserInProcessParams {
	mmGetByUserInProcess.mutex.RLock()

	argCopy := make([]*IOrderRepositoryMockGetByUserInProcessParams, len(mmGetByUserInProcess.callArgs))
	copy(argCopy, mmGetByUserInProcess.callArgs)

	mmGetByUserInProcess.mutex.RUnlock()

	return argCopy
}

// MinimockGetByUserInProcessDone returns true if the count of the GetByUserInProcess invocations corresponds
// the number of defined expectations
func (m *IOrderRepositoryMock) MinimockGetByUserInProcessDone() bool {
	for _, e := range m.GetByUserInProcessMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetByUserInProcessMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetByUserInProcessCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetByUserInProcess != nil && mm_atomic.LoadUint64(&m.afterGetByUserInProcessCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetByUserInProcessInspect logs each unmet expectation
func (m *IOrderRepositoryMock) MinimockGetByUserInProcessInspect() {
	for _, e := range m.GetByUserInProcessMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to IOrderRepositoryMock.GetByUserInProcess with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetByUserInProcessMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetByUserInProcessCounter) < 1 {
		if m.GetByUserInProcessMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to IOrderRepositoryMock.GetByUserInProcess")
		} else {
			m.t.Errorf("Expected call to IOrderRepositoryMock.GetByUserInProcess with params: %#v", *m.GetByUserInProcessMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetByUserInProcess != nil && mm_atomic.LoadUint64(&m.afterGetByUserInProcessCounter) < 1 {
		m.t.Error("Expected call to IOrderRepositoryMock.GetByUserInProcess")
	}
}

type mIOrderRepositoryMockInsert struct {
	mock               *IOrderRepositoryMock
	defaultExpectation *IOrderRepositoryMockInsertExpectation
	expectations       []*IOrderRepositoryMockInsertExpectation

	callArgs []*IOrderRepositoryMockInsertParams
	mutex    sync.RWMutex
}

// IOrderRepositoryMockInsertExpectation specifies expectation struct of the IOrderRepository.Insert
type IOrderRepositoryMockInsertExpectation struct {
	mock    *IOrderRepositoryMock
	params  *IOrderRepositoryMockInsertParams
	results *IOrderRepositoryMockInsertResults
	Counter uint64
}

// IOrderRepositoryMockInsertParams contains parameters of the IOrderRepository.Insert
type IOrderRepositoryMockInsertParams struct {
	ctx   context.Context
	order *models.Order
}

// IOrderRepositoryMockInsertResults contains results of the IOrderRepository.Insert
type IOrderRepositoryMockInsertResults struct {
	err error
}

// Expect sets up expected params for IOrderRepository.Insert
func (mmInsert *mIOrderRepositoryMockInsert) Expect(ctx context.Context, order *models.Order) *mIOrderRepositoryMockInsert {
	if mmInsert.mock.funcInsert != nil {
		mmInsert.mock.t.Fatalf("IOrderRepositoryMock.Insert mock is already set by Set")
	}

	if mmInsert.defaultExpectation == nil {
		mmInsert.defaultExpectation = &IOrderRepositoryMockInsertExpectation{}
	}

	mmInsert.defaultExpectation.params = &IOrderRepositoryMockInsertParams{ctx, order}
	for _, e := range mmInsert.expectations {
		if minimock.Equal(e.params, mmInsert.defaultExpectation.params) {
			mmInsert.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmInsert.defaultExpectation.params)
		}
	}

	return mmInsert
}

// Inspect accepts an inspector function that has same arguments as the IOrderRepository.Insert
func (mmInsert *mIOrderRepositoryMockInsert) Inspect(f func(ctx context.Context, order *models.Order)) *mIOrderRepositoryMockInsert {
	if mmInsert.mock.inspectFuncInsert != nil {
		mmInsert.mock.t.Fatalf("Inspect function is already set for IOrderRepositoryMock.Insert")
	}

	mmInsert.mock.inspectFuncInsert = f

	return mmInsert
}

// Return sets up results that will be returned by IOrderRepository.Insert
func (mmInsert *mIOrderRepositoryMockInsert) Return(err error) *IOrderRepositoryMock {
	if mmInsert.mock.funcInsert != nil {
		mmInsert.mock.t.Fatalf("IOrderRepositoryMock.Insert mock is already set by Set")
	}

	if mmInsert.defaultExpectation == nil {
		mmInsert.defaultExpectation = &IOrderRepositoryMockInsertExpectation{mock: mmInsert.mock}
	}
	mmInsert.defaultExpectation.results = &IOrderRepositoryMockInsertResults{err}
	return mmInsert.mock
}

// Set uses given function f to mock the IOrderRepository.Insert method
func (mmInsert *mIOrderRepositoryMockInsert) Set(f func(ctx context.Context, order *models.Order) (err error)) *IOrderRepositoryMock {
	if mmInsert.defaultExpectation != nil {
		mmInsert.mock.t.Fatalf("Default expectation is already set for the IOrderRepository.Insert method")
	}

	if len(mmInsert.expectations) > 0 {
		mmInsert.mock.t.Fatalf("Some expectations are already set for the IOrderRepository.Insert method")
	}

	mmInsert.mock.funcInsert = f
	return mmInsert.mock
}

// When sets expectation for the IOrderRepository.Insert which will trigger the result defined by the following
// Then helper
func (mmInsert *mIOrderRepositoryMockInsert) When(ctx context.Context, order *models.Order) *IOrderRepositoryMockInsertExpectation {
	if mmInsert.mock.funcInsert != nil {
		mmInsert.mock.t.Fatalf("IOrderRepositoryMock.Insert mock is already set by Set")
	}

	expectation := &IOrderRepositoryMockInsertExpectation{
		mock:   mmInsert.mock,
		params: &IOrderRepositoryMockInsertParams{ctx, order},
	}
	mmInsert.expectations = append(mmInsert.expectations, expectation)
	return expectation
}

// Then sets up IOrderRepository.Insert return parameters for the expectation previously defined by the When method
func (e *IOrderRepositoryMockInsertExpectation) Then(err error) *IOrderRepositoryMock {
	e.results = &IOrderRepositoryMockInsertResults{err}
	return e.mock
}

// Insert implements interfaces.IOrderRepository
func (mmInsert *IOrderRepositoryMock) Insert(ctx context.Context, order *models.Order) (err error) {
	mm_atomic.AddUint64(&mmInsert.beforeInsertCounter, 1)
	defer mm_atomic.AddUint64(&mmInsert.afterInsertCounter, 1)

	if mmInsert.inspectFuncInsert != nil {
		mmInsert.inspectFuncInsert(ctx, order)
	}

	mm_params := &IOrderRepositoryMockInsertParams{ctx, order}

	// Record call args
	mmInsert.InsertMock.mutex.Lock()
	mmInsert.InsertMock.callArgs = append(mmInsert.InsertMock.callArgs, mm_params)
	mmInsert.InsertMock.mutex.Unlock()

	for _, e := range mmInsert.InsertMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmInsert.InsertMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmInsert.InsertMock.defaultExpectation.Counter, 1)
		mm_want := mmInsert.InsertMock.defaultExpectation.params
		mm_got := IOrderRepositoryMockInsertParams{ctx, order}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmInsert.t.Errorf("IOrderRepositoryMock.Insert got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmInsert.InsertMock.defaultExpectation.results
		if mm_results == nil {
			mmInsert.t.Fatal("No results are set for the IOrderRepositoryMock.Insert")
		}
		return (*mm_results).err
	}
	if mmInsert.funcInsert != nil {
		return mmInsert.funcInsert(ctx, order)
	}
	mmInsert.t.Fatalf("Unexpected call to IOrderRepositoryMock.Insert. %v %v", ctx, order)
	return
}

// InsertAfterCounter returns a count of finished IOrderRepositoryMock.Insert invocations
func (mmInsert *IOrderRepositoryMock) InsertAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmInsert.afterInsertCounter)
}

// InsertBeforeCounter returns a count of IOrderRepositoryMock.Insert invocations
func (mmInsert *IOrderRepositoryMock) InsertBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmInsert.beforeInsertCounter)
}

// Calls returns a list of arguments used in each call to IOrderRepositoryMock.Insert.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmInsert *mIOrderRepositoryMockInsert) Calls() []*IOrderRepositoryMockInsertParams {
	mmInsert.mutex.RLock()

	argCopy := make([]*IOrderRepositoryMockInsertParams, len(mmInsert.callArgs))
	copy(argCopy, mmInsert.callArgs)

	mmInsert.mutex.RUnlock()

	return argCopy
}

// MinimockInsertDone returns true if the count of the Insert invocations corresponds
// the number of defined expectations
func (m *IOrderRepositoryMock) MinimockInsertDone() bool {
	for _, e := range m.InsertMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.InsertMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterInsertCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcInsert != nil && mm_atomic.LoadUint64(&m.afterInsertCounter) < 1 {
		return false
	}
	return true
}

// MinimockInsertInspect logs each unmet expectation
func (m *IOrderRepositoryMock) MinimockInsertInspect() {
	for _, e := range m.InsertMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to IOrderRepositoryMock.Insert with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.InsertMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterInsertCounter) < 1 {
		if m.InsertMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to IOrderRepositoryMock.Insert")
		} else {
			m.t.Errorf("Expected call to IOrderRepositoryMock.Insert with params: %#v", *m.InsertMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcInsert != nil && mm_atomic.LoadUint64(&m.afterInsertCounter) < 1 {
		m.t.Error("Expected call to IOrderRepositoryMock.Insert")
	}
}

type mIOrderRepositoryMockUpdate struct {
	mock               *IOrderRepositoryMock
	defaultExpectation *IOrderRepositoryMockUpdateExpectation
	expectations       []*IOrderRepositoryMockUpdateExpectation

	callArgs []*IOrderRepositoryMockUpdateParams
	mutex    sync.RWMutex
}

// IOrderRepositoryMockUpdateExpectation specifies expectation struct of the IOrderRepository.Update
type IOrderRepositoryMockUpdateExpectation struct {
	mock    *IOrderRepositoryMock
	params  *IOrderRepositoryMockUpdateParams
	results *IOrderRepositoryMockUpdateResults
	Counter uint64
}

// IOrderRepositoryMockUpdateParams contains parameters of the IOrderRepository.Update
type IOrderRepositoryMockUpdateParams struct {
	ctx   context.Context
	order *models.Order
}

// IOrderRepositoryMockUpdateResults contains results of the IOrderRepository.Update
type IOrderRepositoryMockUpdateResults struct {
	err error
}

// Expect sets up expected params for IOrderRepository.Update
func (mmUpdate *mIOrderRepositoryMockUpdate) Expect(ctx context.Context, order *models.Order) *mIOrderRepositoryMockUpdate {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("IOrderRepositoryMock.Update mock is already set by Set")
	}

	if mmUpdate.defaultExpectation == nil {
		mmUpdate.defaultExpectation = &IOrderRepositoryMockUpdateExpectation{}
	}

	mmUpdate.defaultExpectation.params = &IOrderRepositoryMockUpdateParams{ctx, order}
	for _, e := range mmUpdate.expectations {
		if minimock.Equal(e.params, mmUpdate.defaultExpectation.params) {
			mmUpdate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpdate.defaultExpectation.params)
		}
	}

	return mmUpdate
}

// Inspect accepts an inspector function that has same arguments as the IOrderRepository.Update
func (mmUpdate *mIOrderRepositoryMockUpdate) Inspect(f func(ctx context.Context, order *models.Order)) *mIOrderRepositoryMockUpdate {
	if mmUpdate.mock.inspectFuncUpdate != nil {
		mmUpdate.mock.t.Fatalf("Inspect function is already set for IOrderRepositoryMock.Update")
	}

	mmUpdate.mock.inspectFuncUpdate = f

	return mmUpdate
}

// Return sets up results that will be returned by IOrderRepository.Update
func (mmUpdate *mIOrderRepositoryMockUpdate) Return(err error) *IOrderRepositoryMock {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("IOrderRepositoryMock.Update mock is already set by Set")
	}

	if mmUpdate.defaultExpectation == nil {
		mmUpdate.defaultExpectation = &IOrderRepositoryMockUpdateExpectation{mock: mmUpdate.mock}
	}
	mmUpdate.defaultExpectation.results = &IOrderRepositoryMockUpdateResults{err}
	return mmUpdate.mock
}

// Set uses given function f to mock the IOrderRepository.Update method
func (mmUpdate *mIOrderRepositoryMockUpdate) Set(f func(ctx context.Context, order *models.Order) (err error)) *IOrderRepositoryMock {
	if mmUpdate.defaultExpectation != nil {
		mmUpdate.mock.t.Fatalf("Default expectation is already set for the IOrderRepository.Update method")
	}

	if len(mmUpdate.expectations) > 0 {
		mmUpdate.mock.t.Fatalf("Some expectations are already set for the IOrderRepository.Update method")
	}

	mmUpdate.mock.funcUpdate = f
	return mmUpdate.mock
}

// When sets expectation for the IOrderRepository.Update which will trigger the result defined by the following
// Then helper
func (mmUpdate *mIOrderRepositoryMockUpdate) When(ctx context.Context, order *models.Order) *IOrderRepositoryMockUpdateExpectation {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("IOrderRepositoryMock.Update mock is already set by Set")
	}

	expectation := &IOrderRepositoryMockUpdateExpectation{
		mock:   mmUpdate.mock,
		params: &IOrderRepositoryMockUpdateParams{ctx, order},
	}
	mmUpdate.expectations = append(mmUpdate.expectations, expectation)
	return expectation
}

// Then sets up IOrderRepository.Update return parameters for the expectation previously defined by the When method
func (e *IOrderRepositoryMockUpdateExpectation) Then(err error) *IOrderRepositoryMock {
	e.results = &IOrderRepositoryMockUpdateResults{err}
	return e.mock
}

// Update implements interfaces.IOrderRepository
func (mmUpdate *IOrderRepositoryMock) Update(ctx context.Context, order *models.Order) (err error) {
	mm_atomic.AddUint64(&mmUpdate.beforeUpdateCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdate.afterUpdateCounter, 1)

	if mmUpdate.inspectFuncUpdate != nil {
		mmUpdate.inspectFuncUpdate(ctx, order)
	}

	mm_params := &IOrderRepositoryMockUpdateParams{ctx, order}

	// Record call args
	mmUpdate.UpdateMock.mutex.Lock()
	mmUpdate.UpdateMock.callArgs = append(mmUpdate.UpdateMock.callArgs, mm_params)
	mmUpdate.UpdateMock.mutex.Unlock()

	for _, e := range mmUpdate.UpdateMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmUpdate.UpdateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdate.UpdateMock.defaultExpectation.Counter, 1)
		mm_want := mmUpdate.UpdateMock.defaultExpectation.params
		mm_got := IOrderRepositoryMockUpdateParams{ctx, order}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUpdate.t.Errorf("IOrderRepositoryMock.Update got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUpdate.UpdateMock.defaultExpectation.results
		if mm_results == nil {
			mmUpdate.t.Fatal("No results are set for the IOrderRepositoryMock.Update")
		}
		return (*mm_results).err
	}
	if mmUpdate.funcUpdate != nil {
		return mmUpdate.funcUpdate(ctx, order)
	}
	mmUpdate.t.Fatalf("Unexpected call to IOrderRepositoryMock.Update. %v %v", ctx, order)
	return
}

// UpdateAfterCounter returns a count of finished IOrderRepositoryMock.Update invocations
func (mmUpdate *IOrderRepositoryMock) UpdateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdate.afterUpdateCounter)
}

// UpdateBeforeCounter returns a count of IOrderRepositoryMock.Update invocations
func (mmUpdate *IOrderRepositoryMock) UpdateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdate.beforeUpdateCounter)
}

// Calls returns a list of arguments used in each call to IOrderRepositoryMock.Update.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpdate *mIOrderRepositoryMockUpdate) Calls() []*IOrderRepositoryMockUpdateParams {
	mmUpdate.mutex.RLock()

	argCopy := make([]*IOrderRepositoryMockUpdateParams, len(mmUpdate.callArgs))
	copy(argCopy, mmUpdate.callArgs)

	mmUpdate.mutex.RUnlock()

	return argCopy
}

// MinimockUpdateDone returns true if the count of the Update invocations corresponds
// the number of defined expectations
func (m *IOrderRepositoryMock) MinimockUpdateDone() bool {
	for _, e := range m.UpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdate != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		return false
	}
	return true
}

// MinimockUpdateInspect logs each unmet expectation
func (m *IOrderRepositoryMock) MinimockUpdateInspect() {
	for _, e := range m.UpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to IOrderRepositoryMock.Update with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		if m.UpdateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to IOrderRepositoryMock.Update")
		} else {
			m.t.Errorf("Expected call to IOrderRepositoryMock.Update with params: %#v", *m.UpdateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdate != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		m.t.Error("Expected call to IOrderRepositoryMock.Update")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *IOrderRepositoryMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockDeleteInspect()

		m.MinimockGetInspect()

		m.MinimockGetByUserInProcessInspect()

		m.MinimockInsertInspect()

		m.MinimockUpdateInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *IOrderRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *IOrderRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockDeleteDone() &&
		m.MinimockGetDone() &&
		m.MinimockGetByUserInProcessDone() &&
		m.MinimockInsertDone() &&
		m.MinimockUpdateDone()
}
