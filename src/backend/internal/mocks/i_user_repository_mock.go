package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i git.iu7.bmstu.ru/ovv20u676/ppo/src/internal/interfaces.IUserRepository -o ../mocks/i_user_repository_mock_test.go -n IUserRepositoryMock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"git.iu7.bmstu.ru/ovv20u676/ppo/src/backend/internal/logic/models"

	"github.com/gojuno/minimock/v3"
	"github.com/google/uuid"
)

// IUserRepositoryMock implements interfaces.IUserRepository
type IUserRepositoryMock struct {
	t minimock.Tester

	funcAuthorize          func(ctx context.Context, login string, password string) (up1 *models.User, err error)
	inspectFuncAuthorize   func(ctx context.Context, login string, password string)
	afterAuthorizeCounter  uint64
	beforeAuthorizeCounter uint64
	AuthorizeMock          mIUserRepositoryMockAuthorize

	funcGet          func(ctx context.Context, ID uuid.UUID) (up1 *models.User, err error)
	inspectFuncGet   func(ctx context.Context, ID uuid.UUID)
	afterGetCounter  uint64
	beforeGetCounter uint64
	GetMock          mIUserRepositoryMockGet

	funcInsert          func(ctx context.Context, user *models.User) (err error)
	inspectFuncInsert   func(ctx context.Context, user *models.User)
	afterInsertCounter  uint64
	beforeInsertCounter uint64
	InsertMock          mIUserRepositoryMockInsert

	funcUpdateUserPoints          func(ctx context.Context, ID uuid.UUID, points int) (err error)
	inspectFuncUpdateUserPoints   func(ctx context.Context, ID uuid.UUID, points int)
	afterUpdateUserPointsCounter  uint64
	beforeUpdateUserPointsCounter uint64
	UpdateUserPointsMock          mIUserRepositoryMockUpdateUserPoints
}

// NewIUserRepositoryMock returns a mock for interfaces.IUserRepository
func NewIUserRepositoryMock(t minimock.Tester) *IUserRepositoryMock {
	m := &IUserRepositoryMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.AuthorizeMock = mIUserRepositoryMockAuthorize{mock: m}
	m.AuthorizeMock.callArgs = []*IUserRepositoryMockAuthorizeParams{}

	m.GetMock = mIUserRepositoryMockGet{mock: m}
	m.GetMock.callArgs = []*IUserRepositoryMockGetParams{}

	m.InsertMock = mIUserRepositoryMockInsert{mock: m}
	m.InsertMock.callArgs = []*IUserRepositoryMockInsertParams{}

	m.UpdateUserPointsMock = mIUserRepositoryMockUpdateUserPoints{mock: m}
	m.UpdateUserPointsMock.callArgs = []*IUserRepositoryMockUpdateUserPointsParams{}

	return m
}

type mIUserRepositoryMockAuthorize struct {
	mock               *IUserRepositoryMock
	defaultExpectation *IUserRepositoryMockAuthorizeExpectation
	expectations       []*IUserRepositoryMockAuthorizeExpectation

	callArgs []*IUserRepositoryMockAuthorizeParams
	mutex    sync.RWMutex
}

// IUserRepositoryMockAuthorizeExpectation specifies expectation struct of the IUserRepository.Authorize
type IUserRepositoryMockAuthorizeExpectation struct {
	mock    *IUserRepositoryMock
	params  *IUserRepositoryMockAuthorizeParams
	results *IUserRepositoryMockAuthorizeResults
	Counter uint64
}

// IUserRepositoryMockAuthorizeParams contains parameters of the IUserRepository.Authorize
type IUserRepositoryMockAuthorizeParams struct {
	ctx      context.Context
	login    string
	password string
}

// IUserRepositoryMockAuthorizeResults contains results of the IUserRepository.Authorize
type IUserRepositoryMockAuthorizeResults struct {
	up1 *models.User
	err error
}

// Expect sets up expected params for IUserRepository.Authorize
func (mmAuthorize *mIUserRepositoryMockAuthorize) Expect(ctx context.Context, login string, password string) *mIUserRepositoryMockAuthorize {
	if mmAuthorize.mock.funcAuthorize != nil {
		mmAuthorize.mock.t.Fatalf("IUserRepositoryMock.Authorize mock is already set by Set")
	}

	if mmAuthorize.defaultExpectation == nil {
		mmAuthorize.defaultExpectation = &IUserRepositoryMockAuthorizeExpectation{}
	}

	mmAuthorize.defaultExpectation.params = &IUserRepositoryMockAuthorizeParams{ctx, login, password}
	for _, e := range mmAuthorize.expectations {
		if minimock.Equal(e.params, mmAuthorize.defaultExpectation.params) {
			mmAuthorize.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmAuthorize.defaultExpectation.params)
		}
	}

	return mmAuthorize
}

// Inspect accepts an inspector function that has same arguments as the IUserRepository.Authorize
func (mmAuthorize *mIUserRepositoryMockAuthorize) Inspect(f func(ctx context.Context, login string, password string)) *mIUserRepositoryMockAuthorize {
	if mmAuthorize.mock.inspectFuncAuthorize != nil {
		mmAuthorize.mock.t.Fatalf("Inspect function is already set for IUserRepositoryMock.Authorize")
	}

	mmAuthorize.mock.inspectFuncAuthorize = f

	return mmAuthorize
}

// Return sets up results that will be returned by IUserRepository.Authorize
func (mmAuthorize *mIUserRepositoryMockAuthorize) Return(up1 *models.User, err error) *IUserRepositoryMock {
	if mmAuthorize.mock.funcAuthorize != nil {
		mmAuthorize.mock.t.Fatalf("IUserRepositoryMock.Authorize mock is already set by Set")
	}

	if mmAuthorize.defaultExpectation == nil {
		mmAuthorize.defaultExpectation = &IUserRepositoryMockAuthorizeExpectation{mock: mmAuthorize.mock}
	}
	mmAuthorize.defaultExpectation.results = &IUserRepositoryMockAuthorizeResults{up1, err}
	return mmAuthorize.mock
}

// Set uses given function f to mock the IUserRepository.Authorize method
func (mmAuthorize *mIUserRepositoryMockAuthorize) Set(f func(ctx context.Context, login string, password string) (up1 *models.User, err error)) *IUserRepositoryMock {
	if mmAuthorize.defaultExpectation != nil {
		mmAuthorize.mock.t.Fatalf("Default expectation is already set for the IUserRepository.Authorize method")
	}

	if len(mmAuthorize.expectations) > 0 {
		mmAuthorize.mock.t.Fatalf("Some expectations are already set for the IUserRepository.Authorize method")
	}

	mmAuthorize.mock.funcAuthorize = f
	return mmAuthorize.mock
}

// When sets expectation for the IUserRepository.Authorize which will trigger the result defined by the following
// Then helper
func (mmAuthorize *mIUserRepositoryMockAuthorize) When(ctx context.Context, login string, password string) *IUserRepositoryMockAuthorizeExpectation {
	if mmAuthorize.mock.funcAuthorize != nil {
		mmAuthorize.mock.t.Fatalf("IUserRepositoryMock.Authorize mock is already set by Set")
	}

	expectation := &IUserRepositoryMockAuthorizeExpectation{
		mock:   mmAuthorize.mock,
		params: &IUserRepositoryMockAuthorizeParams{ctx, login, password},
	}
	mmAuthorize.expectations = append(mmAuthorize.expectations, expectation)
	return expectation
}

// Then sets up IUserRepository.Authorize return parameters for the expectation previously defined by the When method
func (e *IUserRepositoryMockAuthorizeExpectation) Then(up1 *models.User, err error) *IUserRepositoryMock {
	e.results = &IUserRepositoryMockAuthorizeResults{up1, err}
	return e.mock
}

// Authorize implements interfaces.IUserRepository
func (mmAuthorize *IUserRepositoryMock) Authorize(ctx context.Context, login string, password string) (up1 *models.User, err error) {
	mm_atomic.AddUint64(&mmAuthorize.beforeAuthorizeCounter, 1)
	defer mm_atomic.AddUint64(&mmAuthorize.afterAuthorizeCounter, 1)

	if mmAuthorize.inspectFuncAuthorize != nil {
		mmAuthorize.inspectFuncAuthorize(ctx, login, password)
	}

	mm_params := &IUserRepositoryMockAuthorizeParams{ctx, login, password}

	// Record call args
	mmAuthorize.AuthorizeMock.mutex.Lock()
	mmAuthorize.AuthorizeMock.callArgs = append(mmAuthorize.AuthorizeMock.callArgs, mm_params)
	mmAuthorize.AuthorizeMock.mutex.Unlock()

	for _, e := range mmAuthorize.AuthorizeMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.up1, e.results.err
		}
	}

	if mmAuthorize.AuthorizeMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmAuthorize.AuthorizeMock.defaultExpectation.Counter, 1)
		mm_want := mmAuthorize.AuthorizeMock.defaultExpectation.params
		mm_got := IUserRepositoryMockAuthorizeParams{ctx, login, password}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmAuthorize.t.Errorf("IUserRepositoryMock.Authorize got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmAuthorize.AuthorizeMock.defaultExpectation.results
		if mm_results == nil {
			mmAuthorize.t.Fatal("No results are set for the IUserRepositoryMock.Authorize")
		}
		return (*mm_results).up1, (*mm_results).err
	}
	if mmAuthorize.funcAuthorize != nil {
		return mmAuthorize.funcAuthorize(ctx, login, password)
	}
	mmAuthorize.t.Fatalf("Unexpected call to IUserRepositoryMock.Authorize. %v %v %v", ctx, login, password)
	return
}

// AuthorizeAfterCounter returns a count of finished IUserRepositoryMock.Authorize invocations
func (mmAuthorize *IUserRepositoryMock) AuthorizeAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAuthorize.afterAuthorizeCounter)
}

// AuthorizeBeforeCounter returns a count of IUserRepositoryMock.Authorize invocations
func (mmAuthorize *IUserRepositoryMock) AuthorizeBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAuthorize.beforeAuthorizeCounter)
}

// Calls returns a list of arguments used in each call to IUserRepositoryMock.Authorize.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmAuthorize *mIUserRepositoryMockAuthorize) Calls() []*IUserRepositoryMockAuthorizeParams {
	mmAuthorize.mutex.RLock()

	argCopy := make([]*IUserRepositoryMockAuthorizeParams, len(mmAuthorize.callArgs))
	copy(argCopy, mmAuthorize.callArgs)

	mmAuthorize.mutex.RUnlock()

	return argCopy
}

// MinimockAuthorizeDone returns true if the count of the Authorize invocations corresponds
// the number of defined expectations
func (m *IUserRepositoryMock) MinimockAuthorizeDone() bool {
	for _, e := range m.AuthorizeMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.AuthorizeMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterAuthorizeCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAuthorize != nil && mm_atomic.LoadUint64(&m.afterAuthorizeCounter) < 1 {
		return false
	}
	return true
}

// MinimockAuthorizeInspect logs each unmet expectation
func (m *IUserRepositoryMock) MinimockAuthorizeInspect() {
	for _, e := range m.AuthorizeMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to IUserRepositoryMock.Authorize with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.AuthorizeMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterAuthorizeCounter) < 1 {
		if m.AuthorizeMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to IUserRepositoryMock.Authorize")
		} else {
			m.t.Errorf("Expected call to IUserRepositoryMock.Authorize with params: %#v", *m.AuthorizeMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAuthorize != nil && mm_atomic.LoadUint64(&m.afterAuthorizeCounter) < 1 {
		m.t.Error("Expected call to IUserRepositoryMock.Authorize")
	}
}

type mIUserRepositoryMockGet struct {
	mock               *IUserRepositoryMock
	defaultExpectation *IUserRepositoryMockGetExpectation
	expectations       []*IUserRepositoryMockGetExpectation

	callArgs []*IUserRepositoryMockGetParams
	mutex    sync.RWMutex
}

// IUserRepositoryMockGetExpectation specifies expectation struct of the IUserRepository.Get
type IUserRepositoryMockGetExpectation struct {
	mock    *IUserRepositoryMock
	params  *IUserRepositoryMockGetParams
	results *IUserRepositoryMockGetResults
	Counter uint64
}

// IUserRepositoryMockGetParams contains parameters of the IUserRepository.Get
type IUserRepositoryMockGetParams struct {
	ctx context.Context
	ID  uuid.UUID
}

// IUserRepositoryMockGetResults contains results of the IUserRepository.Get
type IUserRepositoryMockGetResults struct {
	up1 *models.User
	err error
}

// Expect sets up expected params for IUserRepository.Get
func (mmGet *mIUserRepositoryMockGet) Expect(ctx context.Context, ID uuid.UUID) *mIUserRepositoryMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("IUserRepositoryMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &IUserRepositoryMockGetExpectation{}
	}

	mmGet.defaultExpectation.params = &IUserRepositoryMockGetParams{ctx, ID}
	for _, e := range mmGet.expectations {
		if minimock.Equal(e.params, mmGet.defaultExpectation.params) {
			mmGet.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGet.defaultExpectation.params)
		}
	}

	return mmGet
}

// Inspect accepts an inspector function that has same arguments as the IUserRepository.Get
func (mmGet *mIUserRepositoryMockGet) Inspect(f func(ctx context.Context, ID uuid.UUID)) *mIUserRepositoryMockGet {
	if mmGet.mock.inspectFuncGet != nil {
		mmGet.mock.t.Fatalf("Inspect function is already set for IUserRepositoryMock.Get")
	}

	mmGet.mock.inspectFuncGet = f

	return mmGet
}

// Return sets up results that will be returned by IUserRepository.Get
func (mmGet *mIUserRepositoryMockGet) Return(up1 *models.User, err error) *IUserRepositoryMock {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("IUserRepositoryMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &IUserRepositoryMockGetExpectation{mock: mmGet.mock}
	}
	mmGet.defaultExpectation.results = &IUserRepositoryMockGetResults{up1, err}
	return mmGet.mock
}

// Set uses given function f to mock the IUserRepository.Get method
func (mmGet *mIUserRepositoryMockGet) Set(f func(ctx context.Context, ID uuid.UUID) (up1 *models.User, err error)) *IUserRepositoryMock {
	if mmGet.defaultExpectation != nil {
		mmGet.mock.t.Fatalf("Default expectation is already set for the IUserRepository.Get method")
	}

	if len(mmGet.expectations) > 0 {
		mmGet.mock.t.Fatalf("Some expectations are already set for the IUserRepository.Get method")
	}

	mmGet.mock.funcGet = f
	return mmGet.mock
}

// When sets expectation for the IUserRepository.Get which will trigger the result defined by the following
// Then helper
func (mmGet *mIUserRepositoryMockGet) When(ctx context.Context, ID uuid.UUID) *IUserRepositoryMockGetExpectation {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("IUserRepositoryMock.Get mock is already set by Set")
	}

	expectation := &IUserRepositoryMockGetExpectation{
		mock:   mmGet.mock,
		params: &IUserRepositoryMockGetParams{ctx, ID},
	}
	mmGet.expectations = append(mmGet.expectations, expectation)
	return expectation
}

// Then sets up IUserRepository.Get return parameters for the expectation previously defined by the When method
func (e *IUserRepositoryMockGetExpectation) Then(up1 *models.User, err error) *IUserRepositoryMock {
	e.results = &IUserRepositoryMockGetResults{up1, err}
	return e.mock
}

// Get implements interfaces.IUserRepository
func (mmGet *IUserRepositoryMock) Get(ctx context.Context, ID uuid.UUID) (up1 *models.User, err error) {
	mm_atomic.AddUint64(&mmGet.beforeGetCounter, 1)
	defer mm_atomic.AddUint64(&mmGet.afterGetCounter, 1)

	if mmGet.inspectFuncGet != nil {
		mmGet.inspectFuncGet(ctx, ID)
	}

	mm_params := &IUserRepositoryMockGetParams{ctx, ID}

	// Record call args
	mmGet.GetMock.mutex.Lock()
	mmGet.GetMock.callArgs = append(mmGet.GetMock.callArgs, mm_params)
	mmGet.GetMock.mutex.Unlock()

	for _, e := range mmGet.GetMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.up1, e.results.err
		}
	}

	if mmGet.GetMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGet.GetMock.defaultExpectation.Counter, 1)
		mm_want := mmGet.GetMock.defaultExpectation.params
		mm_got := IUserRepositoryMockGetParams{ctx, ID}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGet.t.Errorf("IUserRepositoryMock.Get got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGet.GetMock.defaultExpectation.results
		if mm_results == nil {
			mmGet.t.Fatal("No results are set for the IUserRepositoryMock.Get")
		}
		return (*mm_results).up1, (*mm_results).err
	}
	if mmGet.funcGet != nil {
		return mmGet.funcGet(ctx, ID)
	}
	mmGet.t.Fatalf("Unexpected call to IUserRepositoryMock.Get. %v %v", ctx, ID)
	return
}

// GetAfterCounter returns a count of finished IUserRepositoryMock.Get invocations
func (mmGet *IUserRepositoryMock) GetAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.afterGetCounter)
}

// GetBeforeCounter returns a count of IUserRepositoryMock.Get invocations
func (mmGet *IUserRepositoryMock) GetBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.beforeGetCounter)
}

// Calls returns a list of arguments used in each call to IUserRepositoryMock.Get.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGet *mIUserRepositoryMockGet) Calls() []*IUserRepositoryMockGetParams {
	mmGet.mutex.RLock()

	argCopy := make([]*IUserRepositoryMockGetParams, len(mmGet.callArgs))
	copy(argCopy, mmGet.callArgs)

	mmGet.mutex.RUnlock()

	return argCopy
}

// MinimockGetDone returns true if the count of the Get invocations corresponds
// the number of defined expectations
func (m *IUserRepositoryMock) MinimockGetDone() bool {
	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGet != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetInspect logs each unmet expectation
func (m *IUserRepositoryMock) MinimockGetInspect() {
	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to IUserRepositoryMock.Get with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		if m.GetMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to IUserRepositoryMock.Get")
		} else {
			m.t.Errorf("Expected call to IUserRepositoryMock.Get with params: %#v", *m.GetMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGet != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		m.t.Error("Expected call to IUserRepositoryMock.Get")
	}
}

type mIUserRepositoryMockInsert struct {
	mock               *IUserRepositoryMock
	defaultExpectation *IUserRepositoryMockInsertExpectation
	expectations       []*IUserRepositoryMockInsertExpectation

	callArgs []*IUserRepositoryMockInsertParams
	mutex    sync.RWMutex
}

// IUserRepositoryMockInsertExpectation specifies expectation struct of the IUserRepository.Insert
type IUserRepositoryMockInsertExpectation struct {
	mock    *IUserRepositoryMock
	params  *IUserRepositoryMockInsertParams
	results *IUserRepositoryMockInsertResults
	Counter uint64
}

// IUserRepositoryMockInsertParams contains parameters of the IUserRepository.Insert
type IUserRepositoryMockInsertParams struct {
	ctx  context.Context
	user *models.User
}

// IUserRepositoryMockInsertResults contains results of the IUserRepository.Insert
type IUserRepositoryMockInsertResults struct {
	err error
}

// Expect sets up expected params for IUserRepository.Insert
func (mmInsert *mIUserRepositoryMockInsert) Expect(ctx context.Context, user *models.User) *mIUserRepositoryMockInsert {
	if mmInsert.mock.funcInsert != nil {
		mmInsert.mock.t.Fatalf("IUserRepositoryMock.Insert mock is already set by Set")
	}

	if mmInsert.defaultExpectation == nil {
		mmInsert.defaultExpectation = &IUserRepositoryMockInsertExpectation{}
	}

	mmInsert.defaultExpectation.params = &IUserRepositoryMockInsertParams{ctx, user}
	for _, e := range mmInsert.expectations {
		if minimock.Equal(e.params, mmInsert.defaultExpectation.params) {
			mmInsert.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmInsert.defaultExpectation.params)
		}
	}

	return mmInsert
}

// Inspect accepts an inspector function that has same arguments as the IUserRepository.Insert
func (mmInsert *mIUserRepositoryMockInsert) Inspect(f func(ctx context.Context, user *models.User)) *mIUserRepositoryMockInsert {
	if mmInsert.mock.inspectFuncInsert != nil {
		mmInsert.mock.t.Fatalf("Inspect function is already set for IUserRepositoryMock.Insert")
	}

	mmInsert.mock.inspectFuncInsert = f

	return mmInsert
}

// Return sets up results that will be returned by IUserRepository.Insert
func (mmInsert *mIUserRepositoryMockInsert) Return(err error) *IUserRepositoryMock {
	if mmInsert.mock.funcInsert != nil {
		mmInsert.mock.t.Fatalf("IUserRepositoryMock.Insert mock is already set by Set")
	}

	if mmInsert.defaultExpectation == nil {
		mmInsert.defaultExpectation = &IUserRepositoryMockInsertExpectation{mock: mmInsert.mock}
	}
	mmInsert.defaultExpectation.results = &IUserRepositoryMockInsertResults{err}
	return mmInsert.mock
}

// Set uses given function f to mock the IUserRepository.Insert method
func (mmInsert *mIUserRepositoryMockInsert) Set(f func(ctx context.Context, user *models.User) (err error)) *IUserRepositoryMock {
	if mmInsert.defaultExpectation != nil {
		mmInsert.mock.t.Fatalf("Default expectation is already set for the IUserRepository.Insert method")
	}

	if len(mmInsert.expectations) > 0 {
		mmInsert.mock.t.Fatalf("Some expectations are already set for the IUserRepository.Insert method")
	}

	mmInsert.mock.funcInsert = f
	return mmInsert.mock
}

// When sets expectation for the IUserRepository.Insert which will trigger the result defined by the following
// Then helper
func (mmInsert *mIUserRepositoryMockInsert) When(ctx context.Context, user *models.User) *IUserRepositoryMockInsertExpectation {
	if mmInsert.mock.funcInsert != nil {
		mmInsert.mock.t.Fatalf("IUserRepositoryMock.Insert mock is already set by Set")
	}

	expectation := &IUserRepositoryMockInsertExpectation{
		mock:   mmInsert.mock,
		params: &IUserRepositoryMockInsertParams{ctx, user},
	}
	mmInsert.expectations = append(mmInsert.expectations, expectation)
	return expectation
}

// Then sets up IUserRepository.Insert return parameters for the expectation previously defined by the When method
func (e *IUserRepositoryMockInsertExpectation) Then(err error) *IUserRepositoryMock {
	e.results = &IUserRepositoryMockInsertResults{err}
	return e.mock
}

// Insert implements interfaces.IUserRepository
func (mmInsert *IUserRepositoryMock) Insert(ctx context.Context, user *models.User) (err error) {
	mm_atomic.AddUint64(&mmInsert.beforeInsertCounter, 1)
	defer mm_atomic.AddUint64(&mmInsert.afterInsertCounter, 1)

	if mmInsert.inspectFuncInsert != nil {
		mmInsert.inspectFuncInsert(ctx, user)
	}

	mm_params := &IUserRepositoryMockInsertParams{ctx, user}

	// Record call args
	mmInsert.InsertMock.mutex.Lock()
	mmInsert.InsertMock.callArgs = append(mmInsert.InsertMock.callArgs, mm_params)
	mmInsert.InsertMock.mutex.Unlock()

	for _, e := range mmInsert.InsertMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmInsert.InsertMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmInsert.InsertMock.defaultExpectation.Counter, 1)
		mm_want := mmInsert.InsertMock.defaultExpectation.params
		mm_got := IUserRepositoryMockInsertParams{ctx, user}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmInsert.t.Errorf("IUserRepositoryMock.Insert got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmInsert.InsertMock.defaultExpectation.results
		if mm_results == nil {
			mmInsert.t.Fatal("No results are set for the IUserRepositoryMock.Insert")
		}
		return (*mm_results).err
	}
	if mmInsert.funcInsert != nil {
		return mmInsert.funcInsert(ctx, user)
	}
	mmInsert.t.Fatalf("Unexpected call to IUserRepositoryMock.Insert. %v %v", ctx, user)
	return
}

// InsertAfterCounter returns a count of finished IUserRepositoryMock.Insert invocations
func (mmInsert *IUserRepositoryMock) InsertAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmInsert.afterInsertCounter)
}

// InsertBeforeCounter returns a count of IUserRepositoryMock.Insert invocations
func (mmInsert *IUserRepositoryMock) InsertBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmInsert.beforeInsertCounter)
}

// Calls returns a list of arguments used in each call to IUserRepositoryMock.Insert.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmInsert *mIUserRepositoryMockInsert) Calls() []*IUserRepositoryMockInsertParams {
	mmInsert.mutex.RLock()

	argCopy := make([]*IUserRepositoryMockInsertParams, len(mmInsert.callArgs))
	copy(argCopy, mmInsert.callArgs)

	mmInsert.mutex.RUnlock()

	return argCopy
}

// MinimockInsertDone returns true if the count of the Insert invocations corresponds
// the number of defined expectations
func (m *IUserRepositoryMock) MinimockInsertDone() bool {
	for _, e := range m.InsertMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.InsertMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterInsertCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcInsert != nil && mm_atomic.LoadUint64(&m.afterInsertCounter) < 1 {
		return false
	}
	return true
}

// MinimockInsertInspect logs each unmet expectation
func (m *IUserRepositoryMock) MinimockInsertInspect() {
	for _, e := range m.InsertMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to IUserRepositoryMock.Insert with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.InsertMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterInsertCounter) < 1 {
		if m.InsertMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to IUserRepositoryMock.Insert")
		} else {
			m.t.Errorf("Expected call to IUserRepositoryMock.Insert with params: %#v", *m.InsertMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcInsert != nil && mm_atomic.LoadUint64(&m.afterInsertCounter) < 1 {
		m.t.Error("Expected call to IUserRepositoryMock.Insert")
	}
}

type mIUserRepositoryMockUpdateUserPoints struct {
	mock               *IUserRepositoryMock
	defaultExpectation *IUserRepositoryMockUpdateUserPointsExpectation
	expectations       []*IUserRepositoryMockUpdateUserPointsExpectation

	callArgs []*IUserRepositoryMockUpdateUserPointsParams
	mutex    sync.RWMutex
}

// IUserRepositoryMockUpdateUserPointsExpectation specifies expectation struct of the IUserRepository.UpdateUserPoints
type IUserRepositoryMockUpdateUserPointsExpectation struct {
	mock    *IUserRepositoryMock
	params  *IUserRepositoryMockUpdateUserPointsParams
	results *IUserRepositoryMockUpdateUserPointsResults
	Counter uint64
}

// IUserRepositoryMockUpdateUserPointsParams contains parameters of the IUserRepository.UpdateUserPoints
type IUserRepositoryMockUpdateUserPointsParams struct {
	ctx    context.Context
	ID     uuid.UUID
	points int
}

// IUserRepositoryMockUpdateUserPointsResults contains results of the IUserRepository.UpdateUserPoints
type IUserRepositoryMockUpdateUserPointsResults struct {
	err error
}

// Expect sets up expected params for IUserRepository.UpdateUserPoints
func (mmUpdateUserPoints *mIUserRepositoryMockUpdateUserPoints) Expect(ctx context.Context, ID uuid.UUID, points int) *mIUserRepositoryMockUpdateUserPoints {
	if mmUpdateUserPoints.mock.funcUpdateUserPoints != nil {
		mmUpdateUserPoints.mock.t.Fatalf("IUserRepositoryMock.UpdateUserPoints mock is already set by Set")
	}

	if mmUpdateUserPoints.defaultExpectation == nil {
		mmUpdateUserPoints.defaultExpectation = &IUserRepositoryMockUpdateUserPointsExpectation{}
	}

	mmUpdateUserPoints.defaultExpectation.params = &IUserRepositoryMockUpdateUserPointsParams{ctx, ID, points}
	for _, e := range mmUpdateUserPoints.expectations {
		if minimock.Equal(e.params, mmUpdateUserPoints.defaultExpectation.params) {
			mmUpdateUserPoints.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpdateUserPoints.defaultExpectation.params)
		}
	}

	return mmUpdateUserPoints
}

// Inspect accepts an inspector function that has same arguments as the IUserRepository.UpdateUserPoints
func (mmUpdateUserPoints *mIUserRepositoryMockUpdateUserPoints) Inspect(f func(ctx context.Context, ID uuid.UUID, points int)) *mIUserRepositoryMockUpdateUserPoints {
	if mmUpdateUserPoints.mock.inspectFuncUpdateUserPoints != nil {
		mmUpdateUserPoints.mock.t.Fatalf("Inspect function is already set for IUserRepositoryMock.UpdateUserPoints")
	}

	mmUpdateUserPoints.mock.inspectFuncUpdateUserPoints = f

	return mmUpdateUserPoints
}

// Return sets up results that will be returned by IUserRepository.UpdateUserPoints
func (mmUpdateUserPoints *mIUserRepositoryMockUpdateUserPoints) Return(err error) *IUserRepositoryMock {
	if mmUpdateUserPoints.mock.funcUpdateUserPoints != nil {
		mmUpdateUserPoints.mock.t.Fatalf("IUserRepositoryMock.UpdateUserPoints mock is already set by Set")
	}

	if mmUpdateUserPoints.defaultExpectation == nil {
		mmUpdateUserPoints.defaultExpectation = &IUserRepositoryMockUpdateUserPointsExpectation{mock: mmUpdateUserPoints.mock}
	}
	mmUpdateUserPoints.defaultExpectation.results = &IUserRepositoryMockUpdateUserPointsResults{err}
	return mmUpdateUserPoints.mock
}

// Set uses given function f to mock the IUserRepository.UpdateUserPoints method
func (mmUpdateUserPoints *mIUserRepositoryMockUpdateUserPoints) Set(f func(ctx context.Context, ID uuid.UUID, points int) (err error)) *IUserRepositoryMock {
	if mmUpdateUserPoints.defaultExpectation != nil {
		mmUpdateUserPoints.mock.t.Fatalf("Default expectation is already set for the IUserRepository.UpdateUserPoints method")
	}

	if len(mmUpdateUserPoints.expectations) > 0 {
		mmUpdateUserPoints.mock.t.Fatalf("Some expectations are already set for the IUserRepository.UpdateUserPoints method")
	}

	mmUpdateUserPoints.mock.funcUpdateUserPoints = f
	return mmUpdateUserPoints.mock
}

// When sets expectation for the IUserRepository.UpdateUserPoints which will trigger the result defined by the following
// Then helper
func (mmUpdateUserPoints *mIUserRepositoryMockUpdateUserPoints) When(ctx context.Context, ID uuid.UUID, points int) *IUserRepositoryMockUpdateUserPointsExpectation {
	if mmUpdateUserPoints.mock.funcUpdateUserPoints != nil {
		mmUpdateUserPoints.mock.t.Fatalf("IUserRepositoryMock.UpdateUserPoints mock is already set by Set")
	}

	expectation := &IUserRepositoryMockUpdateUserPointsExpectation{
		mock:   mmUpdateUserPoints.mock,
		params: &IUserRepositoryMockUpdateUserPointsParams{ctx, ID, points},
	}
	mmUpdateUserPoints.expectations = append(mmUpdateUserPoints.expectations, expectation)
	return expectation
}

// Then sets up IUserRepository.UpdateUserPoints return parameters for the expectation previously defined by the When method
func (e *IUserRepositoryMockUpdateUserPointsExpectation) Then(err error) *IUserRepositoryMock {
	e.results = &IUserRepositoryMockUpdateUserPointsResults{err}
	return e.mock
}

// UpdateUserPoints implements interfaces.IUserRepository
func (mmUpdateUserPoints *IUserRepositoryMock) UpdateUserPoints(ctx context.Context, ID uuid.UUID, points int) (err error) {
	mm_atomic.AddUint64(&mmUpdateUserPoints.beforeUpdateUserPointsCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdateUserPoints.afterUpdateUserPointsCounter, 1)

	if mmUpdateUserPoints.inspectFuncUpdateUserPoints != nil {
		mmUpdateUserPoints.inspectFuncUpdateUserPoints(ctx, ID, points)
	}

	mm_params := &IUserRepositoryMockUpdateUserPointsParams{ctx, ID, points}

	// Record call args
	mmUpdateUserPoints.UpdateUserPointsMock.mutex.Lock()
	mmUpdateUserPoints.UpdateUserPointsMock.callArgs = append(mmUpdateUserPoints.UpdateUserPointsMock.callArgs, mm_params)
	mmUpdateUserPoints.UpdateUserPointsMock.mutex.Unlock()

	for _, e := range mmUpdateUserPoints.UpdateUserPointsMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmUpdateUserPoints.UpdateUserPointsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdateUserPoints.UpdateUserPointsMock.defaultExpectation.Counter, 1)
		mm_want := mmUpdateUserPoints.UpdateUserPointsMock.defaultExpectation.params
		mm_got := IUserRepositoryMockUpdateUserPointsParams{ctx, ID, points}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUpdateUserPoints.t.Errorf("IUserRepositoryMock.UpdateUserPoints got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUpdateUserPoints.UpdateUserPointsMock.defaultExpectation.results
		if mm_results == nil {
			mmUpdateUserPoints.t.Fatal("No results are set for the IUserRepositoryMock.UpdateUserPoints")
		}
		return (*mm_results).err
	}
	if mmUpdateUserPoints.funcUpdateUserPoints != nil {
		return mmUpdateUserPoints.funcUpdateUserPoints(ctx, ID, points)
	}
	mmUpdateUserPoints.t.Fatalf("Unexpected call to IUserRepositoryMock.UpdateUserPoints. %v %v %v", ctx, ID, points)
	return
}

// UpdateUserPointsAfterCounter returns a count of finished IUserRepositoryMock.UpdateUserPoints invocations
func (mmUpdateUserPoints *IUserRepositoryMock) UpdateUserPointsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateUserPoints.afterUpdateUserPointsCounter)
}

// UpdateUserPointsBeforeCounter returns a count of IUserRepositoryMock.UpdateUserPoints invocations
func (mmUpdateUserPoints *IUserRepositoryMock) UpdateUserPointsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateUserPoints.beforeUpdateUserPointsCounter)
}

// Calls returns a list of arguments used in each call to IUserRepositoryMock.UpdateUserPoints.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpdateUserPoints *mIUserRepositoryMockUpdateUserPoints) Calls() []*IUserRepositoryMockUpdateUserPointsParams {
	mmUpdateUserPoints.mutex.RLock()

	argCopy := make([]*IUserRepositoryMockUpdateUserPointsParams, len(mmUpdateUserPoints.callArgs))
	copy(argCopy, mmUpdateUserPoints.callArgs)

	mmUpdateUserPoints.mutex.RUnlock()

	return argCopy
}

// MinimockUpdateUserPointsDone returns true if the count of the UpdateUserPoints invocations corresponds
// the number of defined expectations
func (m *IUserRepositoryMock) MinimockUpdateUserPointsDone() bool {
	for _, e := range m.UpdateUserPointsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateUserPointsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateUserPointsCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdateUserPoints != nil && mm_atomic.LoadUint64(&m.afterUpdateUserPointsCounter) < 1 {
		return false
	}
	return true
}

// MinimockUpdateUserPointsInspect logs each unmet expectation
func (m *IUserRepositoryMock) MinimockUpdateUserPointsInspect() {
	for _, e := range m.UpdateUserPointsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to IUserRepositoryMock.UpdateUserPoints with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateUserPointsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateUserPointsCounter) < 1 {
		if m.UpdateUserPointsMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to IUserRepositoryMock.UpdateUserPoints")
		} else {
			m.t.Errorf("Expected call to IUserRepositoryMock.UpdateUserPoints with params: %#v", *m.UpdateUserPointsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdateUserPoints != nil && mm_atomic.LoadUint64(&m.afterUpdateUserPointsCounter) < 1 {
		m.t.Error("Expected call to IUserRepositoryMock.UpdateUserPoints")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *IUserRepositoryMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockAuthorizeInspect()

		m.MinimockGetInspect()

		m.MinimockInsertInspect()

		m.MinimockUpdateUserPointsInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *IUserRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *IUserRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockAuthorizeDone() &&
		m.MinimockGetDone() &&
		m.MinimockInsertDone() &&
		m.MinimockUpdateUserPointsDone()
}
