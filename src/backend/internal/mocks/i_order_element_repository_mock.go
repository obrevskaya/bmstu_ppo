package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i git.iu7.bmstu.ru/ovv20u676/ppo/src/internal/interfaces.IOrderElementRepository -o ../mocks/i_order_element_repository_mock_test.go -n IOrderElementRepositoryMock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"git.iu7.bmstu.ru/ovv20u676/ppo/src/backend/internal/logic/models"

	"github.com/gojuno/minimock/v3"
	"github.com/google/uuid"
)

// IOrderElementRepositoryMock implements interfaces.IOrderElementRepository
type IOrderElementRepositoryMock struct {
	t minimock.Tester

	funcAdd          func(ctx context.Context, elem *models.OrderElement, order *models.Order) (err error)
	inspectFuncAdd   func(ctx context.Context, elem *models.OrderElement, order *models.Order)
	afterAddCounter  uint64
	beforeAddCounter uint64
	AddMock          mIOrderElementRepositoryMockAdd

	funcDecrease          func(ctx context.Context, elem *models.OrderElement, order *models.Order) (err error)
	inspectFuncDecrease   func(ctx context.Context, elem *models.OrderElement, order *models.Order)
	afterDecreaseCounter  uint64
	beforeDecreaseCounter uint64
	DecreaseMock          mIOrderElementRepositoryMockDecrease

	funcDelete          func(ctx context.Context, ID uuid.UUID, order *models.Order) (err error)
	inspectFuncDelete   func(ctx context.Context, ID uuid.UUID, order *models.Order)
	afterDeleteCounter  uint64
	beforeDeleteCounter uint64
	DeleteMock          mIOrderElementRepositoryMockDelete

	funcGetByID          func(ctx context.Context, ID uuid.UUID) (op1 *models.OrderElement, err error)
	inspectFuncGetByID   func(ctx context.Context, ID uuid.UUID)
	afterGetByIDCounter  uint64
	beforeGetByIDCounter uint64
	GetByIDMock          mIOrderElementRepositoryMockGetByID

	funcGetByOrder          func(ctx context.Context, IDOrder uuid.UUID) (opa1 []*models.OrderElement, err error)
	inspectFuncGetByOrder   func(ctx context.Context, IDOrder uuid.UUID)
	afterGetByOrderCounter  uint64
	beforeGetByOrderCounter uint64
	GetByOrderMock          mIOrderElementRepositoryMockGetByOrder

	funcInsert          func(ctx context.Context, elem *models.OrderElement, order *models.Order) (err error)
	inspectFuncInsert   func(ctx context.Context, elem *models.OrderElement, order *models.Order)
	afterInsertCounter  uint64
	beforeInsertCounter uint64
	InsertMock          mIOrderElementRepositoryMockInsert

	funcWineInOrder          func(ctx context.Context, IDWine uuid.UUID, IDOrder uuid.UUID) (err error)
	inspectFuncWineInOrder   func(ctx context.Context, IDWine uuid.UUID, IDOrder uuid.UUID)
	afterWineInOrderCounter  uint64
	beforeWineInOrderCounter uint64
	WineInOrderMock          mIOrderElementRepositoryMockWineInOrder
}

// NewIOrderElementRepositoryMock returns a mock for interfaces.IOrderElementRepository
func NewIOrderElementRepositoryMock(t minimock.Tester) *IOrderElementRepositoryMock {
	m := &IOrderElementRepositoryMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.AddMock = mIOrderElementRepositoryMockAdd{mock: m}
	m.AddMock.callArgs = []*IOrderElementRepositoryMockAddParams{}

	m.DecreaseMock = mIOrderElementRepositoryMockDecrease{mock: m}
	m.DecreaseMock.callArgs = []*IOrderElementRepositoryMockDecreaseParams{}

	m.DeleteMock = mIOrderElementRepositoryMockDelete{mock: m}
	m.DeleteMock.callArgs = []*IOrderElementRepositoryMockDeleteParams{}

	m.GetByIDMock = mIOrderElementRepositoryMockGetByID{mock: m}
	m.GetByIDMock.callArgs = []*IOrderElementRepositoryMockGetByIDParams{}

	m.GetByOrderMock = mIOrderElementRepositoryMockGetByOrder{mock: m}
	m.GetByOrderMock.callArgs = []*IOrderElementRepositoryMockGetByOrderParams{}

	m.InsertMock = mIOrderElementRepositoryMockInsert{mock: m}
	m.InsertMock.callArgs = []*IOrderElementRepositoryMockInsertParams{}

	m.WineInOrderMock = mIOrderElementRepositoryMockWineInOrder{mock: m}
	m.WineInOrderMock.callArgs = []*IOrderElementRepositoryMockWineInOrderParams{}

	return m
}

type mIOrderElementRepositoryMockAdd struct {
	mock               *IOrderElementRepositoryMock
	defaultExpectation *IOrderElementRepositoryMockAddExpectation
	expectations       []*IOrderElementRepositoryMockAddExpectation

	callArgs []*IOrderElementRepositoryMockAddParams
	mutex    sync.RWMutex
}

// IOrderElementRepositoryMockAddExpectation specifies expectation struct of the IOrderElementRepository.Add
type IOrderElementRepositoryMockAddExpectation struct {
	mock    *IOrderElementRepositoryMock
	params  *IOrderElementRepositoryMockAddParams
	results *IOrderElementRepositoryMockAddResults
	Counter uint64
}

// IOrderElementRepositoryMockAddParams contains parameters of the IOrderElementRepository.Add
type IOrderElementRepositoryMockAddParams struct {
	ctx   context.Context
	elem  *models.OrderElement
	order *models.Order
}

// IOrderElementRepositoryMockAddResults contains results of the IOrderElementRepository.Add
type IOrderElementRepositoryMockAddResults struct {
	err error
}

// Expect sets up expected params for IOrderElementRepository.Add
func (mmAdd *mIOrderElementRepositoryMockAdd) Expect(ctx context.Context, elem *models.OrderElement, order *models.Order) *mIOrderElementRepositoryMockAdd {
	if mmAdd.mock.funcAdd != nil {
		mmAdd.mock.t.Fatalf("IOrderElementRepositoryMock.Add mock is already set by Set")
	}

	if mmAdd.defaultExpectation == nil {
		mmAdd.defaultExpectation = &IOrderElementRepositoryMockAddExpectation{}
	}

	mmAdd.defaultExpectation.params = &IOrderElementRepositoryMockAddParams{ctx, elem, order}
	for _, e := range mmAdd.expectations {
		if minimock.Equal(e.params, mmAdd.defaultExpectation.params) {
			mmAdd.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmAdd.defaultExpectation.params)
		}
	}

	return mmAdd
}

// Inspect accepts an inspector function that has same arguments as the IOrderElementRepository.Add
func (mmAdd *mIOrderElementRepositoryMockAdd) Inspect(f func(ctx context.Context, elem *models.OrderElement, order *models.Order)) *mIOrderElementRepositoryMockAdd {
	if mmAdd.mock.inspectFuncAdd != nil {
		mmAdd.mock.t.Fatalf("Inspect function is already set for IOrderElementRepositoryMock.Add")
	}

	mmAdd.mock.inspectFuncAdd = f

	return mmAdd
}

// Return sets up results that will be returned by IOrderElementRepository.Add
func (mmAdd *mIOrderElementRepositoryMockAdd) Return(err error) *IOrderElementRepositoryMock {
	if mmAdd.mock.funcAdd != nil {
		mmAdd.mock.t.Fatalf("IOrderElementRepositoryMock.Add mock is already set by Set")
	}

	if mmAdd.defaultExpectation == nil {
		mmAdd.defaultExpectation = &IOrderElementRepositoryMockAddExpectation{mock: mmAdd.mock}
	}
	mmAdd.defaultExpectation.results = &IOrderElementRepositoryMockAddResults{err}
	return mmAdd.mock
}

// Set uses given function f to mock the IOrderElementRepository.Add method
func (mmAdd *mIOrderElementRepositoryMockAdd) Set(f func(ctx context.Context, elem *models.OrderElement, order *models.Order) (err error)) *IOrderElementRepositoryMock {
	if mmAdd.defaultExpectation != nil {
		mmAdd.mock.t.Fatalf("Default expectation is already set for the IOrderElementRepository.Add method")
	}

	if len(mmAdd.expectations) > 0 {
		mmAdd.mock.t.Fatalf("Some expectations are already set for the IOrderElementRepository.Add method")
	}

	mmAdd.mock.funcAdd = f
	return mmAdd.mock
}

// When sets expectation for the IOrderElementRepository.Add which will trigger the result defined by the following
// Then helper
func (mmAdd *mIOrderElementRepositoryMockAdd) When(ctx context.Context, elem *models.OrderElement, order *models.Order) *IOrderElementRepositoryMockAddExpectation {
	if mmAdd.mock.funcAdd != nil {
		mmAdd.mock.t.Fatalf("IOrderElementRepositoryMock.Add mock is already set by Set")
	}

	expectation := &IOrderElementRepositoryMockAddExpectation{
		mock:   mmAdd.mock,
		params: &IOrderElementRepositoryMockAddParams{ctx, elem, order},
	}
	mmAdd.expectations = append(mmAdd.expectations, expectation)
	return expectation
}

// Then sets up IOrderElementRepository.Add return parameters for the expectation previously defined by the When method
func (e *IOrderElementRepositoryMockAddExpectation) Then(err error) *IOrderElementRepositoryMock {
	e.results = &IOrderElementRepositoryMockAddResults{err}
	return e.mock
}

// Add implements interfaces.IOrderElementRepository
func (mmAdd *IOrderElementRepositoryMock) Add(ctx context.Context, elem *models.OrderElement, order *models.Order) (err error) {
	mm_atomic.AddUint64(&mmAdd.beforeAddCounter, 1)
	defer mm_atomic.AddUint64(&mmAdd.afterAddCounter, 1)

	if mmAdd.inspectFuncAdd != nil {
		mmAdd.inspectFuncAdd(ctx, elem, order)
	}

	mm_params := &IOrderElementRepositoryMockAddParams{ctx, elem, order}

	// Record call args
	mmAdd.AddMock.mutex.Lock()
	mmAdd.AddMock.callArgs = append(mmAdd.AddMock.callArgs, mm_params)
	mmAdd.AddMock.mutex.Unlock()

	for _, e := range mmAdd.AddMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmAdd.AddMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmAdd.AddMock.defaultExpectation.Counter, 1)
		mm_want := mmAdd.AddMock.defaultExpectation.params
		mm_got := IOrderElementRepositoryMockAddParams{ctx, elem, order}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmAdd.t.Errorf("IOrderElementRepositoryMock.Add got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmAdd.AddMock.defaultExpectation.results
		if mm_results == nil {
			mmAdd.t.Fatal("No results are set for the IOrderElementRepositoryMock.Add")
		}
		return (*mm_results).err
	}
	if mmAdd.funcAdd != nil {
		return mmAdd.funcAdd(ctx, elem, order)
	}
	mmAdd.t.Fatalf("Unexpected call to IOrderElementRepositoryMock.Add. %v %v %v", ctx, elem, order)
	return
}

// AddAfterCounter returns a count of finished IOrderElementRepositoryMock.Add invocations
func (mmAdd *IOrderElementRepositoryMock) AddAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAdd.afterAddCounter)
}

// AddBeforeCounter returns a count of IOrderElementRepositoryMock.Add invocations
func (mmAdd *IOrderElementRepositoryMock) AddBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAdd.beforeAddCounter)
}

// Calls returns a list of arguments used in each call to IOrderElementRepositoryMock.Add.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmAdd *mIOrderElementRepositoryMockAdd) Calls() []*IOrderElementRepositoryMockAddParams {
	mmAdd.mutex.RLock()

	argCopy := make([]*IOrderElementRepositoryMockAddParams, len(mmAdd.callArgs))
	copy(argCopy, mmAdd.callArgs)

	mmAdd.mutex.RUnlock()

	return argCopy
}

// MinimockAddDone returns true if the count of the Add invocations corresponds
// the number of defined expectations
func (m *IOrderElementRepositoryMock) MinimockAddDone() bool {
	for _, e := range m.AddMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.AddMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterAddCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAdd != nil && mm_atomic.LoadUint64(&m.afterAddCounter) < 1 {
		return false
	}
	return true
}

// MinimockAddInspect logs each unmet expectation
func (m *IOrderElementRepositoryMock) MinimockAddInspect() {
	for _, e := range m.AddMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to IOrderElementRepositoryMock.Add with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.AddMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterAddCounter) < 1 {
		if m.AddMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to IOrderElementRepositoryMock.Add")
		} else {
			m.t.Errorf("Expected call to IOrderElementRepositoryMock.Add with params: %#v", *m.AddMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAdd != nil && mm_atomic.LoadUint64(&m.afterAddCounter) < 1 {
		m.t.Error("Expected call to IOrderElementRepositoryMock.Add")
	}
}

type mIOrderElementRepositoryMockDecrease struct {
	mock               *IOrderElementRepositoryMock
	defaultExpectation *IOrderElementRepositoryMockDecreaseExpectation
	expectations       []*IOrderElementRepositoryMockDecreaseExpectation

	callArgs []*IOrderElementRepositoryMockDecreaseParams
	mutex    sync.RWMutex
}

// IOrderElementRepositoryMockDecreaseExpectation specifies expectation struct of the IOrderElementRepository.Decrease
type IOrderElementRepositoryMockDecreaseExpectation struct {
	mock    *IOrderElementRepositoryMock
	params  *IOrderElementRepositoryMockDecreaseParams
	results *IOrderElementRepositoryMockDecreaseResults
	Counter uint64
}

// IOrderElementRepositoryMockDecreaseParams contains parameters of the IOrderElementRepository.Decrease
type IOrderElementRepositoryMockDecreaseParams struct {
	ctx   context.Context
	elem  *models.OrderElement
	order *models.Order
}

// IOrderElementRepositoryMockDecreaseResults contains results of the IOrderElementRepository.Decrease
type IOrderElementRepositoryMockDecreaseResults struct {
	err error
}

// Expect sets up expected params for IOrderElementRepository.Decrease
func (mmDecrease *mIOrderElementRepositoryMockDecrease) Expect(ctx context.Context, elem *models.OrderElement, order *models.Order) *mIOrderElementRepositoryMockDecrease {
	if mmDecrease.mock.funcDecrease != nil {
		mmDecrease.mock.t.Fatalf("IOrderElementRepositoryMock.Decrease mock is already set by Set")
	}

	if mmDecrease.defaultExpectation == nil {
		mmDecrease.defaultExpectation = &IOrderElementRepositoryMockDecreaseExpectation{}
	}

	mmDecrease.defaultExpectation.params = &IOrderElementRepositoryMockDecreaseParams{ctx, elem, order}
	for _, e := range mmDecrease.expectations {
		if minimock.Equal(e.params, mmDecrease.defaultExpectation.params) {
			mmDecrease.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDecrease.defaultExpectation.params)
		}
	}

	return mmDecrease
}

// Inspect accepts an inspector function that has same arguments as the IOrderElementRepository.Decrease
func (mmDecrease *mIOrderElementRepositoryMockDecrease) Inspect(f func(ctx context.Context, elem *models.OrderElement, order *models.Order)) *mIOrderElementRepositoryMockDecrease {
	if mmDecrease.mock.inspectFuncDecrease != nil {
		mmDecrease.mock.t.Fatalf("Inspect function is already set for IOrderElementRepositoryMock.Decrease")
	}

	mmDecrease.mock.inspectFuncDecrease = f

	return mmDecrease
}

// Return sets up results that will be returned by IOrderElementRepository.Decrease
func (mmDecrease *mIOrderElementRepositoryMockDecrease) Return(err error) *IOrderElementRepositoryMock {
	if mmDecrease.mock.funcDecrease != nil {
		mmDecrease.mock.t.Fatalf("IOrderElementRepositoryMock.Decrease mock is already set by Set")
	}

	if mmDecrease.defaultExpectation == nil {
		mmDecrease.defaultExpectation = &IOrderElementRepositoryMockDecreaseExpectation{mock: mmDecrease.mock}
	}
	mmDecrease.defaultExpectation.results = &IOrderElementRepositoryMockDecreaseResults{err}
	return mmDecrease.mock
}

// Set uses given function f to mock the IOrderElementRepository.Decrease method
func (mmDecrease *mIOrderElementRepositoryMockDecrease) Set(f func(ctx context.Context, elem *models.OrderElement, order *models.Order) (err error)) *IOrderElementRepositoryMock {
	if mmDecrease.defaultExpectation != nil {
		mmDecrease.mock.t.Fatalf("Default expectation is already set for the IOrderElementRepository.Decrease method")
	}

	if len(mmDecrease.expectations) > 0 {
		mmDecrease.mock.t.Fatalf("Some expectations are already set for the IOrderElementRepository.Decrease method")
	}

	mmDecrease.mock.funcDecrease = f
	return mmDecrease.mock
}

// When sets expectation for the IOrderElementRepository.Decrease which will trigger the result defined by the following
// Then helper
func (mmDecrease *mIOrderElementRepositoryMockDecrease) When(ctx context.Context, elem *models.OrderElement, order *models.Order) *IOrderElementRepositoryMockDecreaseExpectation {
	if mmDecrease.mock.funcDecrease != nil {
		mmDecrease.mock.t.Fatalf("IOrderElementRepositoryMock.Decrease mock is already set by Set")
	}

	expectation := &IOrderElementRepositoryMockDecreaseExpectation{
		mock:   mmDecrease.mock,
		params: &IOrderElementRepositoryMockDecreaseParams{ctx, elem, order},
	}
	mmDecrease.expectations = append(mmDecrease.expectations, expectation)
	return expectation
}

// Then sets up IOrderElementRepository.Decrease return parameters for the expectation previously defined by the When method
func (e *IOrderElementRepositoryMockDecreaseExpectation) Then(err error) *IOrderElementRepositoryMock {
	e.results = &IOrderElementRepositoryMockDecreaseResults{err}
	return e.mock
}

// Decrease implements interfaces.IOrderElementRepository
func (mmDecrease *IOrderElementRepositoryMock) Decrease(ctx context.Context, elem *models.OrderElement, order *models.Order) (err error) {
	mm_atomic.AddUint64(&mmDecrease.beforeDecreaseCounter, 1)
	defer mm_atomic.AddUint64(&mmDecrease.afterDecreaseCounter, 1)

	if mmDecrease.inspectFuncDecrease != nil {
		mmDecrease.inspectFuncDecrease(ctx, elem, order)
	}

	mm_params := &IOrderElementRepositoryMockDecreaseParams{ctx, elem, order}

	// Record call args
	mmDecrease.DecreaseMock.mutex.Lock()
	mmDecrease.DecreaseMock.callArgs = append(mmDecrease.DecreaseMock.callArgs, mm_params)
	mmDecrease.DecreaseMock.mutex.Unlock()

	for _, e := range mmDecrease.DecreaseMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmDecrease.DecreaseMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDecrease.DecreaseMock.defaultExpectation.Counter, 1)
		mm_want := mmDecrease.DecreaseMock.defaultExpectation.params
		mm_got := IOrderElementRepositoryMockDecreaseParams{ctx, elem, order}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDecrease.t.Errorf("IOrderElementRepositoryMock.Decrease got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDecrease.DecreaseMock.defaultExpectation.results
		if mm_results == nil {
			mmDecrease.t.Fatal("No results are set for the IOrderElementRepositoryMock.Decrease")
		}
		return (*mm_results).err
	}
	if mmDecrease.funcDecrease != nil {
		return mmDecrease.funcDecrease(ctx, elem, order)
	}
	mmDecrease.t.Fatalf("Unexpected call to IOrderElementRepositoryMock.Decrease. %v %v %v", ctx, elem, order)
	return
}

// DecreaseAfterCounter returns a count of finished IOrderElementRepositoryMock.Decrease invocations
func (mmDecrease *IOrderElementRepositoryMock) DecreaseAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDecrease.afterDecreaseCounter)
}

// DecreaseBeforeCounter returns a count of IOrderElementRepositoryMock.Decrease invocations
func (mmDecrease *IOrderElementRepositoryMock) DecreaseBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDecrease.beforeDecreaseCounter)
}

// Calls returns a list of arguments used in each call to IOrderElementRepositoryMock.Decrease.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDecrease *mIOrderElementRepositoryMockDecrease) Calls() []*IOrderElementRepositoryMockDecreaseParams {
	mmDecrease.mutex.RLock()

	argCopy := make([]*IOrderElementRepositoryMockDecreaseParams, len(mmDecrease.callArgs))
	copy(argCopy, mmDecrease.callArgs)

	mmDecrease.mutex.RUnlock()

	return argCopy
}

// MinimockDecreaseDone returns true if the count of the Decrease invocations corresponds
// the number of defined expectations
func (m *IOrderElementRepositoryMock) MinimockDecreaseDone() bool {
	for _, e := range m.DecreaseMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DecreaseMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDecreaseCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDecrease != nil && mm_atomic.LoadUint64(&m.afterDecreaseCounter) < 1 {
		return false
	}
	return true
}

// MinimockDecreaseInspect logs each unmet expectation
func (m *IOrderElementRepositoryMock) MinimockDecreaseInspect() {
	for _, e := range m.DecreaseMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to IOrderElementRepositoryMock.Decrease with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DecreaseMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDecreaseCounter) < 1 {
		if m.DecreaseMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to IOrderElementRepositoryMock.Decrease")
		} else {
			m.t.Errorf("Expected call to IOrderElementRepositoryMock.Decrease with params: %#v", *m.DecreaseMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDecrease != nil && mm_atomic.LoadUint64(&m.afterDecreaseCounter) < 1 {
		m.t.Error("Expected call to IOrderElementRepositoryMock.Decrease")
	}
}

type mIOrderElementRepositoryMockDelete struct {
	mock               *IOrderElementRepositoryMock
	defaultExpectation *IOrderElementRepositoryMockDeleteExpectation
	expectations       []*IOrderElementRepositoryMockDeleteExpectation

	callArgs []*IOrderElementRepositoryMockDeleteParams
	mutex    sync.RWMutex
}

// IOrderElementRepositoryMockDeleteExpectation specifies expectation struct of the IOrderElementRepository.Delete
type IOrderElementRepositoryMockDeleteExpectation struct {
	mock    *IOrderElementRepositoryMock
	params  *IOrderElementRepositoryMockDeleteParams
	results *IOrderElementRepositoryMockDeleteResults
	Counter uint64
}

// IOrderElementRepositoryMockDeleteParams contains parameters of the IOrderElementRepository.Delete
type IOrderElementRepositoryMockDeleteParams struct {
	ctx   context.Context
	ID    uuid.UUID
	order *models.Order
}

// IOrderElementRepositoryMockDeleteResults contains results of the IOrderElementRepository.Delete
type IOrderElementRepositoryMockDeleteResults struct {
	err error
}

// Expect sets up expected params for IOrderElementRepository.Delete
func (mmDelete *mIOrderElementRepositoryMockDelete) Expect(ctx context.Context, ID uuid.UUID, order *models.Order) *mIOrderElementRepositoryMockDelete {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("IOrderElementRepositoryMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &IOrderElementRepositoryMockDeleteExpectation{}
	}

	mmDelete.defaultExpectation.params = &IOrderElementRepositoryMockDeleteParams{ctx, ID, order}
	for _, e := range mmDelete.expectations {
		if minimock.Equal(e.params, mmDelete.defaultExpectation.params) {
			mmDelete.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDelete.defaultExpectation.params)
		}
	}

	return mmDelete
}

// Inspect accepts an inspector function that has same arguments as the IOrderElementRepository.Delete
func (mmDelete *mIOrderElementRepositoryMockDelete) Inspect(f func(ctx context.Context, ID uuid.UUID, order *models.Order)) *mIOrderElementRepositoryMockDelete {
	if mmDelete.mock.inspectFuncDelete != nil {
		mmDelete.mock.t.Fatalf("Inspect function is already set for IOrderElementRepositoryMock.Delete")
	}

	mmDelete.mock.inspectFuncDelete = f

	return mmDelete
}

// Return sets up results that will be returned by IOrderElementRepository.Delete
func (mmDelete *mIOrderElementRepositoryMockDelete) Return(err error) *IOrderElementRepositoryMock {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("IOrderElementRepositoryMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &IOrderElementRepositoryMockDeleteExpectation{mock: mmDelete.mock}
	}
	mmDelete.defaultExpectation.results = &IOrderElementRepositoryMockDeleteResults{err}
	return mmDelete.mock
}

// Set uses given function f to mock the IOrderElementRepository.Delete method
func (mmDelete *mIOrderElementRepositoryMockDelete) Set(f func(ctx context.Context, ID uuid.UUID, order *models.Order) (err error)) *IOrderElementRepositoryMock {
	if mmDelete.defaultExpectation != nil {
		mmDelete.mock.t.Fatalf("Default expectation is already set for the IOrderElementRepository.Delete method")
	}

	if len(mmDelete.expectations) > 0 {
		mmDelete.mock.t.Fatalf("Some expectations are already set for the IOrderElementRepository.Delete method")
	}

	mmDelete.mock.funcDelete = f
	return mmDelete.mock
}

// When sets expectation for the IOrderElementRepository.Delete which will trigger the result defined by the following
// Then helper
func (mmDelete *mIOrderElementRepositoryMockDelete) When(ctx context.Context, ID uuid.UUID, order *models.Order) *IOrderElementRepositoryMockDeleteExpectation {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("IOrderElementRepositoryMock.Delete mock is already set by Set")
	}

	expectation := &IOrderElementRepositoryMockDeleteExpectation{
		mock:   mmDelete.mock,
		params: &IOrderElementRepositoryMockDeleteParams{ctx, ID, order},
	}
	mmDelete.expectations = append(mmDelete.expectations, expectation)
	return expectation
}

// Then sets up IOrderElementRepository.Delete return parameters for the expectation previously defined by the When method
func (e *IOrderElementRepositoryMockDeleteExpectation) Then(err error) *IOrderElementRepositoryMock {
	e.results = &IOrderElementRepositoryMockDeleteResults{err}
	return e.mock
}

// Delete implements interfaces.IOrderElementRepository
func (mmDelete *IOrderElementRepositoryMock) Delete(ctx context.Context, ID uuid.UUID, order *models.Order) (err error) {
	mm_atomic.AddUint64(&mmDelete.beforeDeleteCounter, 1)
	defer mm_atomic.AddUint64(&mmDelete.afterDeleteCounter, 1)

	if mmDelete.inspectFuncDelete != nil {
		mmDelete.inspectFuncDelete(ctx, ID, order)
	}

	mm_params := &IOrderElementRepositoryMockDeleteParams{ctx, ID, order}

	// Record call args
	mmDelete.DeleteMock.mutex.Lock()
	mmDelete.DeleteMock.callArgs = append(mmDelete.DeleteMock.callArgs, mm_params)
	mmDelete.DeleteMock.mutex.Unlock()

	for _, e := range mmDelete.DeleteMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmDelete.DeleteMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDelete.DeleteMock.defaultExpectation.Counter, 1)
		mm_want := mmDelete.DeleteMock.defaultExpectation.params
		mm_got := IOrderElementRepositoryMockDeleteParams{ctx, ID, order}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDelete.t.Errorf("IOrderElementRepositoryMock.Delete got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDelete.DeleteMock.defaultExpectation.results
		if mm_results == nil {
			mmDelete.t.Fatal("No results are set for the IOrderElementRepositoryMock.Delete")
		}
		return (*mm_results).err
	}
	if mmDelete.funcDelete != nil {
		return mmDelete.funcDelete(ctx, ID, order)
	}
	mmDelete.t.Fatalf("Unexpected call to IOrderElementRepositoryMock.Delete. %v %v %v", ctx, ID, order)
	return
}

// DeleteAfterCounter returns a count of finished IOrderElementRepositoryMock.Delete invocations
func (mmDelete *IOrderElementRepositoryMock) DeleteAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDelete.afterDeleteCounter)
}

// DeleteBeforeCounter returns a count of IOrderElementRepositoryMock.Delete invocations
func (mmDelete *IOrderElementRepositoryMock) DeleteBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDelete.beforeDeleteCounter)
}

// Calls returns a list of arguments used in each call to IOrderElementRepositoryMock.Delete.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDelete *mIOrderElementRepositoryMockDelete) Calls() []*IOrderElementRepositoryMockDeleteParams {
	mmDelete.mutex.RLock()

	argCopy := make([]*IOrderElementRepositoryMockDeleteParams, len(mmDelete.callArgs))
	copy(argCopy, mmDelete.callArgs)

	mmDelete.mutex.RUnlock()

	return argCopy
}

// MinimockDeleteDone returns true if the count of the Delete invocations corresponds
// the number of defined expectations
func (m *IOrderElementRepositoryMock) MinimockDeleteDone() bool {
	for _, e := range m.DeleteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDeleteCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDelete != nil && mm_atomic.LoadUint64(&m.afterDeleteCounter) < 1 {
		return false
	}
	return true
}

// MinimockDeleteInspect logs each unmet expectation
func (m *IOrderElementRepositoryMock) MinimockDeleteInspect() {
	for _, e := range m.DeleteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to IOrderElementRepositoryMock.Delete with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDeleteCounter) < 1 {
		if m.DeleteMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to IOrderElementRepositoryMock.Delete")
		} else {
			m.t.Errorf("Expected call to IOrderElementRepositoryMock.Delete with params: %#v", *m.DeleteMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDelete != nil && mm_atomic.LoadUint64(&m.afterDeleteCounter) < 1 {
		m.t.Error("Expected call to IOrderElementRepositoryMock.Delete")
	}
}

type mIOrderElementRepositoryMockGetByID struct {
	mock               *IOrderElementRepositoryMock
	defaultExpectation *IOrderElementRepositoryMockGetByIDExpectation
	expectations       []*IOrderElementRepositoryMockGetByIDExpectation

	callArgs []*IOrderElementRepositoryMockGetByIDParams
	mutex    sync.RWMutex
}

// IOrderElementRepositoryMockGetByIDExpectation specifies expectation struct of the IOrderElementRepository.GetByID
type IOrderElementRepositoryMockGetByIDExpectation struct {
	mock    *IOrderElementRepositoryMock
	params  *IOrderElementRepositoryMockGetByIDParams
	results *IOrderElementRepositoryMockGetByIDResults
	Counter uint64
}

// IOrderElementRepositoryMockGetByIDParams contains parameters of the IOrderElementRepository.GetByID
type IOrderElementRepositoryMockGetByIDParams struct {
	ctx context.Context
	ID  uuid.UUID
}

// IOrderElementRepositoryMockGetByIDResults contains results of the IOrderElementRepository.GetByID
type IOrderElementRepositoryMockGetByIDResults struct {
	op1 *models.OrderElement
	err error
}

// Expect sets up expected params for IOrderElementRepository.GetByID
func (mmGetByID *mIOrderElementRepositoryMockGetByID) Expect(ctx context.Context, ID uuid.UUID) *mIOrderElementRepositoryMockGetByID {
	if mmGetByID.mock.funcGetByID != nil {
		mmGetByID.mock.t.Fatalf("IOrderElementRepositoryMock.GetByID mock is already set by Set")
	}

	if mmGetByID.defaultExpectation == nil {
		mmGetByID.defaultExpectation = &IOrderElementRepositoryMockGetByIDExpectation{}
	}

	mmGetByID.defaultExpectation.params = &IOrderElementRepositoryMockGetByIDParams{ctx, ID}
	for _, e := range mmGetByID.expectations {
		if minimock.Equal(e.params, mmGetByID.defaultExpectation.params) {
			mmGetByID.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetByID.defaultExpectation.params)
		}
	}

	return mmGetByID
}

// Inspect accepts an inspector function that has same arguments as the IOrderElementRepository.GetByID
func (mmGetByID *mIOrderElementRepositoryMockGetByID) Inspect(f func(ctx context.Context, ID uuid.UUID)) *mIOrderElementRepositoryMockGetByID {
	if mmGetByID.mock.inspectFuncGetByID != nil {
		mmGetByID.mock.t.Fatalf("Inspect function is already set for IOrderElementRepositoryMock.GetByID")
	}

	mmGetByID.mock.inspectFuncGetByID = f

	return mmGetByID
}

// Return sets up results that will be returned by IOrderElementRepository.GetByID
func (mmGetByID *mIOrderElementRepositoryMockGetByID) Return(op1 *models.OrderElement, err error) *IOrderElementRepositoryMock {
	if mmGetByID.mock.funcGetByID != nil {
		mmGetByID.mock.t.Fatalf("IOrderElementRepositoryMock.GetByID mock is already set by Set")
	}

	if mmGetByID.defaultExpectation == nil {
		mmGetByID.defaultExpectation = &IOrderElementRepositoryMockGetByIDExpectation{mock: mmGetByID.mock}
	}
	mmGetByID.defaultExpectation.results = &IOrderElementRepositoryMockGetByIDResults{op1, err}
	return mmGetByID.mock
}

// Set uses given function f to mock the IOrderElementRepository.GetByID method
func (mmGetByID *mIOrderElementRepositoryMockGetByID) Set(f func(ctx context.Context, ID uuid.UUID) (op1 *models.OrderElement, err error)) *IOrderElementRepositoryMock {
	if mmGetByID.defaultExpectation != nil {
		mmGetByID.mock.t.Fatalf("Default expectation is already set for the IOrderElementRepository.GetByID method")
	}

	if len(mmGetByID.expectations) > 0 {
		mmGetByID.mock.t.Fatalf("Some expectations are already set for the IOrderElementRepository.GetByID method")
	}

	mmGetByID.mock.funcGetByID = f
	return mmGetByID.mock
}

// When sets expectation for the IOrderElementRepository.GetByID which will trigger the result defined by the following
// Then helper
func (mmGetByID *mIOrderElementRepositoryMockGetByID) When(ctx context.Context, ID uuid.UUID) *IOrderElementRepositoryMockGetByIDExpectation {
	if mmGetByID.mock.funcGetByID != nil {
		mmGetByID.mock.t.Fatalf("IOrderElementRepositoryMock.GetByID mock is already set by Set")
	}

	expectation := &IOrderElementRepositoryMockGetByIDExpectation{
		mock:   mmGetByID.mock,
		params: &IOrderElementRepositoryMockGetByIDParams{ctx, ID},
	}
	mmGetByID.expectations = append(mmGetByID.expectations, expectation)
	return expectation
}

// Then sets up IOrderElementRepository.GetByID return parameters for the expectation previously defined by the When method
func (e *IOrderElementRepositoryMockGetByIDExpectation) Then(op1 *models.OrderElement, err error) *IOrderElementRepositoryMock {
	e.results = &IOrderElementRepositoryMockGetByIDResults{op1, err}
	return e.mock
}

// GetByID implements interfaces.IOrderElementRepository
func (mmGetByID *IOrderElementRepositoryMock) GetByID(ctx context.Context, ID uuid.UUID) (op1 *models.OrderElement, err error) {
	mm_atomic.AddUint64(&mmGetByID.beforeGetByIDCounter, 1)
	defer mm_atomic.AddUint64(&mmGetByID.afterGetByIDCounter, 1)

	if mmGetByID.inspectFuncGetByID != nil {
		mmGetByID.inspectFuncGetByID(ctx, ID)
	}

	mm_params := &IOrderElementRepositoryMockGetByIDParams{ctx, ID}

	// Record call args
	mmGetByID.GetByIDMock.mutex.Lock()
	mmGetByID.GetByIDMock.callArgs = append(mmGetByID.GetByIDMock.callArgs, mm_params)
	mmGetByID.GetByIDMock.mutex.Unlock()

	for _, e := range mmGetByID.GetByIDMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.op1, e.results.err
		}
	}

	if mmGetByID.GetByIDMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetByID.GetByIDMock.defaultExpectation.Counter, 1)
		mm_want := mmGetByID.GetByIDMock.defaultExpectation.params
		mm_got := IOrderElementRepositoryMockGetByIDParams{ctx, ID}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetByID.t.Errorf("IOrderElementRepositoryMock.GetByID got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetByID.GetByIDMock.defaultExpectation.results
		if mm_results == nil {
			mmGetByID.t.Fatal("No results are set for the IOrderElementRepositoryMock.GetByID")
		}
		return (*mm_results).op1, (*mm_results).err
	}
	if mmGetByID.funcGetByID != nil {
		return mmGetByID.funcGetByID(ctx, ID)
	}
	mmGetByID.t.Fatalf("Unexpected call to IOrderElementRepositoryMock.GetByID. %v %v", ctx, ID)
	return
}

// GetByIDAfterCounter returns a count of finished IOrderElementRepositoryMock.GetByID invocations
func (mmGetByID *IOrderElementRepositoryMock) GetByIDAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetByID.afterGetByIDCounter)
}

// GetByIDBeforeCounter returns a count of IOrderElementRepositoryMock.GetByID invocations
func (mmGetByID *IOrderElementRepositoryMock) GetByIDBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetByID.beforeGetByIDCounter)
}

// Calls returns a list of arguments used in each call to IOrderElementRepositoryMock.GetByID.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetByID *mIOrderElementRepositoryMockGetByID) Calls() []*IOrderElementRepositoryMockGetByIDParams {
	mmGetByID.mutex.RLock()

	argCopy := make([]*IOrderElementRepositoryMockGetByIDParams, len(mmGetByID.callArgs))
	copy(argCopy, mmGetByID.callArgs)

	mmGetByID.mutex.RUnlock()

	return argCopy
}

// MinimockGetByIDDone returns true if the count of the GetByID invocations corresponds
// the number of defined expectations
func (m *IOrderElementRepositoryMock) MinimockGetByIDDone() bool {
	for _, e := range m.GetByIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetByIDMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetByIDCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetByID != nil && mm_atomic.LoadUint64(&m.afterGetByIDCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetByIDInspect logs each unmet expectation
func (m *IOrderElementRepositoryMock) MinimockGetByIDInspect() {
	for _, e := range m.GetByIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to IOrderElementRepositoryMock.GetByID with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetByIDMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetByIDCounter) < 1 {
		if m.GetByIDMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to IOrderElementRepositoryMock.GetByID")
		} else {
			m.t.Errorf("Expected call to IOrderElementRepositoryMock.GetByID with params: %#v", *m.GetByIDMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetByID != nil && mm_atomic.LoadUint64(&m.afterGetByIDCounter) < 1 {
		m.t.Error("Expected call to IOrderElementRepositoryMock.GetByID")
	}
}

type mIOrderElementRepositoryMockGetByOrder struct {
	mock               *IOrderElementRepositoryMock
	defaultExpectation *IOrderElementRepositoryMockGetByOrderExpectation
	expectations       []*IOrderElementRepositoryMockGetByOrderExpectation

	callArgs []*IOrderElementRepositoryMockGetByOrderParams
	mutex    sync.RWMutex
}

// IOrderElementRepositoryMockGetByOrderExpectation specifies expectation struct of the IOrderElementRepository.GetByOrder
type IOrderElementRepositoryMockGetByOrderExpectation struct {
	mock    *IOrderElementRepositoryMock
	params  *IOrderElementRepositoryMockGetByOrderParams
	results *IOrderElementRepositoryMockGetByOrderResults
	Counter uint64
}

// IOrderElementRepositoryMockGetByOrderParams contains parameters of the IOrderElementRepository.GetByOrder
type IOrderElementRepositoryMockGetByOrderParams struct {
	ctx     context.Context
	IDOrder uuid.UUID
}

// IOrderElementRepositoryMockGetByOrderResults contains results of the IOrderElementRepository.GetByOrder
type IOrderElementRepositoryMockGetByOrderResults struct {
	opa1 []*models.OrderElement
	err  error
}

// Expect sets up expected params for IOrderElementRepository.GetByOrder
func (mmGetByOrder *mIOrderElementRepositoryMockGetByOrder) Expect(ctx context.Context, IDOrder uuid.UUID) *mIOrderElementRepositoryMockGetByOrder {
	if mmGetByOrder.mock.funcGetByOrder != nil {
		mmGetByOrder.mock.t.Fatalf("IOrderElementRepositoryMock.GetByOrder mock is already set by Set")
	}

	if mmGetByOrder.defaultExpectation == nil {
		mmGetByOrder.defaultExpectation = &IOrderElementRepositoryMockGetByOrderExpectation{}
	}

	mmGetByOrder.defaultExpectation.params = &IOrderElementRepositoryMockGetByOrderParams{ctx, IDOrder}
	for _, e := range mmGetByOrder.expectations {
		if minimock.Equal(e.params, mmGetByOrder.defaultExpectation.params) {
			mmGetByOrder.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetByOrder.defaultExpectation.params)
		}
	}

	return mmGetByOrder
}

// Inspect accepts an inspector function that has same arguments as the IOrderElementRepository.GetByOrder
func (mmGetByOrder *mIOrderElementRepositoryMockGetByOrder) Inspect(f func(ctx context.Context, IDOrder uuid.UUID)) *mIOrderElementRepositoryMockGetByOrder {
	if mmGetByOrder.mock.inspectFuncGetByOrder != nil {
		mmGetByOrder.mock.t.Fatalf("Inspect function is already set for IOrderElementRepositoryMock.GetByOrder")
	}

	mmGetByOrder.mock.inspectFuncGetByOrder = f

	return mmGetByOrder
}

// Return sets up results that will be returned by IOrderElementRepository.GetByOrder
func (mmGetByOrder *mIOrderElementRepositoryMockGetByOrder) Return(opa1 []*models.OrderElement, err error) *IOrderElementRepositoryMock {
	if mmGetByOrder.mock.funcGetByOrder != nil {
		mmGetByOrder.mock.t.Fatalf("IOrderElementRepositoryMock.GetByOrder mock is already set by Set")
	}

	if mmGetByOrder.defaultExpectation == nil {
		mmGetByOrder.defaultExpectation = &IOrderElementRepositoryMockGetByOrderExpectation{mock: mmGetByOrder.mock}
	}
	mmGetByOrder.defaultExpectation.results = &IOrderElementRepositoryMockGetByOrderResults{opa1, err}
	return mmGetByOrder.mock
}

// Set uses given function f to mock the IOrderElementRepository.GetByOrder method
func (mmGetByOrder *mIOrderElementRepositoryMockGetByOrder) Set(f func(ctx context.Context, IDOrder uuid.UUID) (opa1 []*models.OrderElement, err error)) *IOrderElementRepositoryMock {
	if mmGetByOrder.defaultExpectation != nil {
		mmGetByOrder.mock.t.Fatalf("Default expectation is already set for the IOrderElementRepository.GetByOrder method")
	}

	if len(mmGetByOrder.expectations) > 0 {
		mmGetByOrder.mock.t.Fatalf("Some expectations are already set for the IOrderElementRepository.GetByOrder method")
	}

	mmGetByOrder.mock.funcGetByOrder = f
	return mmGetByOrder.mock
}

// When sets expectation for the IOrderElementRepository.GetByOrder which will trigger the result defined by the following
// Then helper
func (mmGetByOrder *mIOrderElementRepositoryMockGetByOrder) When(ctx context.Context, IDOrder uuid.UUID) *IOrderElementRepositoryMockGetByOrderExpectation {
	if mmGetByOrder.mock.funcGetByOrder != nil {
		mmGetByOrder.mock.t.Fatalf("IOrderElementRepositoryMock.GetByOrder mock is already set by Set")
	}

	expectation := &IOrderElementRepositoryMockGetByOrderExpectation{
		mock:   mmGetByOrder.mock,
		params: &IOrderElementRepositoryMockGetByOrderParams{ctx, IDOrder},
	}
	mmGetByOrder.expectations = append(mmGetByOrder.expectations, expectation)
	return expectation
}

// Then sets up IOrderElementRepository.GetByOrder return parameters for the expectation previously defined by the When method
func (e *IOrderElementRepositoryMockGetByOrderExpectation) Then(opa1 []*models.OrderElement, err error) *IOrderElementRepositoryMock {
	e.results = &IOrderElementRepositoryMockGetByOrderResults{opa1, err}
	return e.mock
}

// GetByOrder implements interfaces.IOrderElementRepository
func (mmGetByOrder *IOrderElementRepositoryMock) GetByOrder(ctx context.Context, IDOrder uuid.UUID) (opa1 []*models.OrderElement, err error) {
	mm_atomic.AddUint64(&mmGetByOrder.beforeGetByOrderCounter, 1)
	defer mm_atomic.AddUint64(&mmGetByOrder.afterGetByOrderCounter, 1)

	if mmGetByOrder.inspectFuncGetByOrder != nil {
		mmGetByOrder.inspectFuncGetByOrder(ctx, IDOrder)
	}

	mm_params := &IOrderElementRepositoryMockGetByOrderParams{ctx, IDOrder}

	// Record call args
	mmGetByOrder.GetByOrderMock.mutex.Lock()
	mmGetByOrder.GetByOrderMock.callArgs = append(mmGetByOrder.GetByOrderMock.callArgs, mm_params)
	mmGetByOrder.GetByOrderMock.mutex.Unlock()

	for _, e := range mmGetByOrder.GetByOrderMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.opa1, e.results.err
		}
	}

	if mmGetByOrder.GetByOrderMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetByOrder.GetByOrderMock.defaultExpectation.Counter, 1)
		mm_want := mmGetByOrder.GetByOrderMock.defaultExpectation.params
		mm_got := IOrderElementRepositoryMockGetByOrderParams{ctx, IDOrder}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetByOrder.t.Errorf("IOrderElementRepositoryMock.GetByOrder got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetByOrder.GetByOrderMock.defaultExpectation.results
		if mm_results == nil {
			mmGetByOrder.t.Fatal("No results are set for the IOrderElementRepositoryMock.GetByOrder")
		}
		return (*mm_results).opa1, (*mm_results).err
	}
	if mmGetByOrder.funcGetByOrder != nil {
		return mmGetByOrder.funcGetByOrder(ctx, IDOrder)
	}
	mmGetByOrder.t.Fatalf("Unexpected call to IOrderElementRepositoryMock.GetByOrder. %v %v", ctx, IDOrder)
	return
}

// GetByOrderAfterCounter returns a count of finished IOrderElementRepositoryMock.GetByOrder invocations
func (mmGetByOrder *IOrderElementRepositoryMock) GetByOrderAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetByOrder.afterGetByOrderCounter)
}

// GetByOrderBeforeCounter returns a count of IOrderElementRepositoryMock.GetByOrder invocations
func (mmGetByOrder *IOrderElementRepositoryMock) GetByOrderBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetByOrder.beforeGetByOrderCounter)
}

// Calls returns a list of arguments used in each call to IOrderElementRepositoryMock.GetByOrder.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetByOrder *mIOrderElementRepositoryMockGetByOrder) Calls() []*IOrderElementRepositoryMockGetByOrderParams {
	mmGetByOrder.mutex.RLock()

	argCopy := make([]*IOrderElementRepositoryMockGetByOrderParams, len(mmGetByOrder.callArgs))
	copy(argCopy, mmGetByOrder.callArgs)

	mmGetByOrder.mutex.RUnlock()

	return argCopy
}

// MinimockGetByOrderDone returns true if the count of the GetByOrder invocations corresponds
// the number of defined expectations
func (m *IOrderElementRepositoryMock) MinimockGetByOrderDone() bool {
	for _, e := range m.GetByOrderMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetByOrderMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetByOrderCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetByOrder != nil && mm_atomic.LoadUint64(&m.afterGetByOrderCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetByOrderInspect logs each unmet expectation
func (m *IOrderElementRepositoryMock) MinimockGetByOrderInspect() {
	for _, e := range m.GetByOrderMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to IOrderElementRepositoryMock.GetByOrder with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetByOrderMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetByOrderCounter) < 1 {
		if m.GetByOrderMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to IOrderElementRepositoryMock.GetByOrder")
		} else {
			m.t.Errorf("Expected call to IOrderElementRepositoryMock.GetByOrder with params: %#v", *m.GetByOrderMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetByOrder != nil && mm_atomic.LoadUint64(&m.afterGetByOrderCounter) < 1 {
		m.t.Error("Expected call to IOrderElementRepositoryMock.GetByOrder")
	}
}

type mIOrderElementRepositoryMockInsert struct {
	mock               *IOrderElementRepositoryMock
	defaultExpectation *IOrderElementRepositoryMockInsertExpectation
	expectations       []*IOrderElementRepositoryMockInsertExpectation

	callArgs []*IOrderElementRepositoryMockInsertParams
	mutex    sync.RWMutex
}

// IOrderElementRepositoryMockInsertExpectation specifies expectation struct of the IOrderElementRepository.Insert
type IOrderElementRepositoryMockInsertExpectation struct {
	mock    *IOrderElementRepositoryMock
	params  *IOrderElementRepositoryMockInsertParams
	results *IOrderElementRepositoryMockInsertResults
	Counter uint64
}

// IOrderElementRepositoryMockInsertParams contains parameters of the IOrderElementRepository.Insert
type IOrderElementRepositoryMockInsertParams struct {
	ctx   context.Context
	elem  *models.OrderElement
	order *models.Order
}

// IOrderElementRepositoryMockInsertResults contains results of the IOrderElementRepository.Insert
type IOrderElementRepositoryMockInsertResults struct {
	err error
}

// Expect sets up expected params for IOrderElementRepository.Insert
func (mmInsert *mIOrderElementRepositoryMockInsert) Expect(ctx context.Context, elem *models.OrderElement, order *models.Order) *mIOrderElementRepositoryMockInsert {
	if mmInsert.mock.funcInsert != nil {
		mmInsert.mock.t.Fatalf("IOrderElementRepositoryMock.Insert mock is already set by Set")
	}

	if mmInsert.defaultExpectation == nil {
		mmInsert.defaultExpectation = &IOrderElementRepositoryMockInsertExpectation{}
	}

	mmInsert.defaultExpectation.params = &IOrderElementRepositoryMockInsertParams{ctx, elem, order}
	for _, e := range mmInsert.expectations {
		if minimock.Equal(e.params, mmInsert.defaultExpectation.params) {
			mmInsert.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmInsert.defaultExpectation.params)
		}
	}

	return mmInsert
}

// Inspect accepts an inspector function that has same arguments as the IOrderElementRepository.Insert
func (mmInsert *mIOrderElementRepositoryMockInsert) Inspect(f func(ctx context.Context, elem *models.OrderElement, order *models.Order)) *mIOrderElementRepositoryMockInsert {
	if mmInsert.mock.inspectFuncInsert != nil {
		mmInsert.mock.t.Fatalf("Inspect function is already set for IOrderElementRepositoryMock.Insert")
	}

	mmInsert.mock.inspectFuncInsert = f

	return mmInsert
}

// Return sets up results that will be returned by IOrderElementRepository.Insert
func (mmInsert *mIOrderElementRepositoryMockInsert) Return(err error) *IOrderElementRepositoryMock {
	if mmInsert.mock.funcInsert != nil {
		mmInsert.mock.t.Fatalf("IOrderElementRepositoryMock.Insert mock is already set by Set")
	}

	if mmInsert.defaultExpectation == nil {
		mmInsert.defaultExpectation = &IOrderElementRepositoryMockInsertExpectation{mock: mmInsert.mock}
	}
	mmInsert.defaultExpectation.results = &IOrderElementRepositoryMockInsertResults{err}
	return mmInsert.mock
}

// Set uses given function f to mock the IOrderElementRepository.Insert method
func (mmInsert *mIOrderElementRepositoryMockInsert) Set(f func(ctx context.Context, elem *models.OrderElement, order *models.Order) (err error)) *IOrderElementRepositoryMock {
	if mmInsert.defaultExpectation != nil {
		mmInsert.mock.t.Fatalf("Default expectation is already set for the IOrderElementRepository.Insert method")
	}

	if len(mmInsert.expectations) > 0 {
		mmInsert.mock.t.Fatalf("Some expectations are already set for the IOrderElementRepository.Insert method")
	}

	mmInsert.mock.funcInsert = f
	return mmInsert.mock
}

// When sets expectation for the IOrderElementRepository.Insert which will trigger the result defined by the following
// Then helper
func (mmInsert *mIOrderElementRepositoryMockInsert) When(ctx context.Context, elem *models.OrderElement, order *models.Order) *IOrderElementRepositoryMockInsertExpectation {
	if mmInsert.mock.funcInsert != nil {
		mmInsert.mock.t.Fatalf("IOrderElementRepositoryMock.Insert mock is already set by Set")
	}

	expectation := &IOrderElementRepositoryMockInsertExpectation{
		mock:   mmInsert.mock,
		params: &IOrderElementRepositoryMockInsertParams{ctx, elem, order},
	}
	mmInsert.expectations = append(mmInsert.expectations, expectation)
	return expectation
}

// Then sets up IOrderElementRepository.Insert return parameters for the expectation previously defined by the When method
func (e *IOrderElementRepositoryMockInsertExpectation) Then(err error) *IOrderElementRepositoryMock {
	e.results = &IOrderElementRepositoryMockInsertResults{err}
	return e.mock
}

// Insert implements interfaces.IOrderElementRepository
func (mmInsert *IOrderElementRepositoryMock) Insert(ctx context.Context, elem *models.OrderElement, order *models.Order) (err error) {
	mm_atomic.AddUint64(&mmInsert.beforeInsertCounter, 1)
	defer mm_atomic.AddUint64(&mmInsert.afterInsertCounter, 1)

	if mmInsert.inspectFuncInsert != nil {
		mmInsert.inspectFuncInsert(ctx, elem, order)
	}

	mm_params := &IOrderElementRepositoryMockInsertParams{ctx, elem, order}

	// Record call args
	mmInsert.InsertMock.mutex.Lock()
	mmInsert.InsertMock.callArgs = append(mmInsert.InsertMock.callArgs, mm_params)
	mmInsert.InsertMock.mutex.Unlock()

	for _, e := range mmInsert.InsertMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmInsert.InsertMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmInsert.InsertMock.defaultExpectation.Counter, 1)
		mm_want := mmInsert.InsertMock.defaultExpectation.params
		mm_got := IOrderElementRepositoryMockInsertParams{ctx, elem, order}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmInsert.t.Errorf("IOrderElementRepositoryMock.Insert got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmInsert.InsertMock.defaultExpectation.results
		if mm_results == nil {
			mmInsert.t.Fatal("No results are set for the IOrderElementRepositoryMock.Insert")
		}
		return (*mm_results).err
	}
	if mmInsert.funcInsert != nil {
		return mmInsert.funcInsert(ctx, elem, order)
	}
	mmInsert.t.Fatalf("Unexpected call to IOrderElementRepositoryMock.Insert. %v %v %v", ctx, elem, order)
	return
}

// InsertAfterCounter returns a count of finished IOrderElementRepositoryMock.Insert invocations
func (mmInsert *IOrderElementRepositoryMock) InsertAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmInsert.afterInsertCounter)
}

// InsertBeforeCounter returns a count of IOrderElementRepositoryMock.Insert invocations
func (mmInsert *IOrderElementRepositoryMock) InsertBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmInsert.beforeInsertCounter)
}

// Calls returns a list of arguments used in each call to IOrderElementRepositoryMock.Insert.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmInsert *mIOrderElementRepositoryMockInsert) Calls() []*IOrderElementRepositoryMockInsertParams {
	mmInsert.mutex.RLock()

	argCopy := make([]*IOrderElementRepositoryMockInsertParams, len(mmInsert.callArgs))
	copy(argCopy, mmInsert.callArgs)

	mmInsert.mutex.RUnlock()

	return argCopy
}

// MinimockInsertDone returns true if the count of the Insert invocations corresponds
// the number of defined expectations
func (m *IOrderElementRepositoryMock) MinimockInsertDone() bool {
	for _, e := range m.InsertMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.InsertMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterInsertCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcInsert != nil && mm_atomic.LoadUint64(&m.afterInsertCounter) < 1 {
		return false
	}
	return true
}

// MinimockInsertInspect logs each unmet expectation
func (m *IOrderElementRepositoryMock) MinimockInsertInspect() {
	for _, e := range m.InsertMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to IOrderElementRepositoryMock.Insert with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.InsertMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterInsertCounter) < 1 {
		if m.InsertMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to IOrderElementRepositoryMock.Insert")
		} else {
			m.t.Errorf("Expected call to IOrderElementRepositoryMock.Insert with params: %#v", *m.InsertMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcInsert != nil && mm_atomic.LoadUint64(&m.afterInsertCounter) < 1 {
		m.t.Error("Expected call to IOrderElementRepositoryMock.Insert")
	}
}

type mIOrderElementRepositoryMockWineInOrder struct {
	mock               *IOrderElementRepositoryMock
	defaultExpectation *IOrderElementRepositoryMockWineInOrderExpectation
	expectations       []*IOrderElementRepositoryMockWineInOrderExpectation

	callArgs []*IOrderElementRepositoryMockWineInOrderParams
	mutex    sync.RWMutex
}

// IOrderElementRepositoryMockWineInOrderExpectation specifies expectation struct of the IOrderElementRepository.WineInOrder
type IOrderElementRepositoryMockWineInOrderExpectation struct {
	mock    *IOrderElementRepositoryMock
	params  *IOrderElementRepositoryMockWineInOrderParams
	results *IOrderElementRepositoryMockWineInOrderResults
	Counter uint64
}

// IOrderElementRepositoryMockWineInOrderParams contains parameters of the IOrderElementRepository.WineInOrder
type IOrderElementRepositoryMockWineInOrderParams struct {
	ctx     context.Context
	IDWine  uuid.UUID
	IDOrder uuid.UUID
}

// IOrderElementRepositoryMockWineInOrderResults contains results of the IOrderElementRepository.WineInOrder
type IOrderElementRepositoryMockWineInOrderResults struct {
	err error
}

// Expect sets up expected params for IOrderElementRepository.WineInOrder
func (mmWineInOrder *mIOrderElementRepositoryMockWineInOrder) Expect(ctx context.Context, IDWine uuid.UUID, IDOrder uuid.UUID) *mIOrderElementRepositoryMockWineInOrder {
	if mmWineInOrder.mock.funcWineInOrder != nil {
		mmWineInOrder.mock.t.Fatalf("IOrderElementRepositoryMock.WineInOrder mock is already set by Set")
	}

	if mmWineInOrder.defaultExpectation == nil {
		mmWineInOrder.defaultExpectation = &IOrderElementRepositoryMockWineInOrderExpectation{}
	}

	mmWineInOrder.defaultExpectation.params = &IOrderElementRepositoryMockWineInOrderParams{ctx, IDWine, IDOrder}
	for _, e := range mmWineInOrder.expectations {
		if minimock.Equal(e.params, mmWineInOrder.defaultExpectation.params) {
			mmWineInOrder.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmWineInOrder.defaultExpectation.params)
		}
	}

	return mmWineInOrder
}

// Inspect accepts an inspector function that has same arguments as the IOrderElementRepository.WineInOrder
func (mmWineInOrder *mIOrderElementRepositoryMockWineInOrder) Inspect(f func(ctx context.Context, IDWine uuid.UUID, IDOrder uuid.UUID)) *mIOrderElementRepositoryMockWineInOrder {
	if mmWineInOrder.mock.inspectFuncWineInOrder != nil {
		mmWineInOrder.mock.t.Fatalf("Inspect function is already set for IOrderElementRepositoryMock.WineInOrder")
	}

	mmWineInOrder.mock.inspectFuncWineInOrder = f

	return mmWineInOrder
}

// Return sets up results that will be returned by IOrderElementRepository.WineInOrder
func (mmWineInOrder *mIOrderElementRepositoryMockWineInOrder) Return(err error) *IOrderElementRepositoryMock {
	if mmWineInOrder.mock.funcWineInOrder != nil {
		mmWineInOrder.mock.t.Fatalf("IOrderElementRepositoryMock.WineInOrder mock is already set by Set")
	}

	if mmWineInOrder.defaultExpectation == nil {
		mmWineInOrder.defaultExpectation = &IOrderElementRepositoryMockWineInOrderExpectation{mock: mmWineInOrder.mock}
	}
	mmWineInOrder.defaultExpectation.results = &IOrderElementRepositoryMockWineInOrderResults{err}
	return mmWineInOrder.mock
}

// Set uses given function f to mock the IOrderElementRepository.WineInOrder method
func (mmWineInOrder *mIOrderElementRepositoryMockWineInOrder) Set(f func(ctx context.Context, IDWine uuid.UUID, IDOrder uuid.UUID) (err error)) *IOrderElementRepositoryMock {
	if mmWineInOrder.defaultExpectation != nil {
		mmWineInOrder.mock.t.Fatalf("Default expectation is already set for the IOrderElementRepository.WineInOrder method")
	}

	if len(mmWineInOrder.expectations) > 0 {
		mmWineInOrder.mock.t.Fatalf("Some expectations are already set for the IOrderElementRepository.WineInOrder method")
	}

	mmWineInOrder.mock.funcWineInOrder = f
	return mmWineInOrder.mock
}

// When sets expectation for the IOrderElementRepository.WineInOrder which will trigger the result defined by the following
// Then helper
func (mmWineInOrder *mIOrderElementRepositoryMockWineInOrder) When(ctx context.Context, IDWine uuid.UUID, IDOrder uuid.UUID) *IOrderElementRepositoryMockWineInOrderExpectation {
	if mmWineInOrder.mock.funcWineInOrder != nil {
		mmWineInOrder.mock.t.Fatalf("IOrderElementRepositoryMock.WineInOrder mock is already set by Set")
	}

	expectation := &IOrderElementRepositoryMockWineInOrderExpectation{
		mock:   mmWineInOrder.mock,
		params: &IOrderElementRepositoryMockWineInOrderParams{ctx, IDWine, IDOrder},
	}
	mmWineInOrder.expectations = append(mmWineInOrder.expectations, expectation)
	return expectation
}

// Then sets up IOrderElementRepository.WineInOrder return parameters for the expectation previously defined by the When method
func (e *IOrderElementRepositoryMockWineInOrderExpectation) Then(err error) *IOrderElementRepositoryMock {
	e.results = &IOrderElementRepositoryMockWineInOrderResults{err}
	return e.mock
}

// WineInOrder implements interfaces.IOrderElementRepository
func (mmWineInOrder *IOrderElementRepositoryMock) WineInOrder(ctx context.Context, IDWine uuid.UUID, IDOrder uuid.UUID) (err error) {
	mm_atomic.AddUint64(&mmWineInOrder.beforeWineInOrderCounter, 1)
	defer mm_atomic.AddUint64(&mmWineInOrder.afterWineInOrderCounter, 1)

	if mmWineInOrder.inspectFuncWineInOrder != nil {
		mmWineInOrder.inspectFuncWineInOrder(ctx, IDWine, IDOrder)
	}

	mm_params := &IOrderElementRepositoryMockWineInOrderParams{ctx, IDWine, IDOrder}

	// Record call args
	mmWineInOrder.WineInOrderMock.mutex.Lock()
	mmWineInOrder.WineInOrderMock.callArgs = append(mmWineInOrder.WineInOrderMock.callArgs, mm_params)
	mmWineInOrder.WineInOrderMock.mutex.Unlock()

	for _, e := range mmWineInOrder.WineInOrderMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmWineInOrder.WineInOrderMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmWineInOrder.WineInOrderMock.defaultExpectation.Counter, 1)
		mm_want := mmWineInOrder.WineInOrderMock.defaultExpectation.params
		mm_got := IOrderElementRepositoryMockWineInOrderParams{ctx, IDWine, IDOrder}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmWineInOrder.t.Errorf("IOrderElementRepositoryMock.WineInOrder got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmWineInOrder.WineInOrderMock.defaultExpectation.results
		if mm_results == nil {
			mmWineInOrder.t.Fatal("No results are set for the IOrderElementRepositoryMock.WineInOrder")
		}
		return (*mm_results).err
	}
	if mmWineInOrder.funcWineInOrder != nil {
		return mmWineInOrder.funcWineInOrder(ctx, IDWine, IDOrder)
	}
	mmWineInOrder.t.Fatalf("Unexpected call to IOrderElementRepositoryMock.WineInOrder. %v %v %v", ctx, IDWine, IDOrder)
	return
}

// WineInOrderAfterCounter returns a count of finished IOrderElementRepositoryMock.WineInOrder invocations
func (mmWineInOrder *IOrderElementRepositoryMock) WineInOrderAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmWineInOrder.afterWineInOrderCounter)
}

// WineInOrderBeforeCounter returns a count of IOrderElementRepositoryMock.WineInOrder invocations
func (mmWineInOrder *IOrderElementRepositoryMock) WineInOrderBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmWineInOrder.beforeWineInOrderCounter)
}

// Calls returns a list of arguments used in each call to IOrderElementRepositoryMock.WineInOrder.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmWineInOrder *mIOrderElementRepositoryMockWineInOrder) Calls() []*IOrderElementRepositoryMockWineInOrderParams {
	mmWineInOrder.mutex.RLock()

	argCopy := make([]*IOrderElementRepositoryMockWineInOrderParams, len(mmWineInOrder.callArgs))
	copy(argCopy, mmWineInOrder.callArgs)

	mmWineInOrder.mutex.RUnlock()

	return argCopy
}

// MinimockWineInOrderDone returns true if the count of the WineInOrder invocations corresponds
// the number of defined expectations
func (m *IOrderElementRepositoryMock) MinimockWineInOrderDone() bool {
	for _, e := range m.WineInOrderMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.WineInOrderMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterWineInOrderCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcWineInOrder != nil && mm_atomic.LoadUint64(&m.afterWineInOrderCounter) < 1 {
		return false
	}
	return true
}

// MinimockWineInOrderInspect logs each unmet expectation
func (m *IOrderElementRepositoryMock) MinimockWineInOrderInspect() {
	for _, e := range m.WineInOrderMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to IOrderElementRepositoryMock.WineInOrder with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.WineInOrderMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterWineInOrderCounter) < 1 {
		if m.WineInOrderMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to IOrderElementRepositoryMock.WineInOrder")
		} else {
			m.t.Errorf("Expected call to IOrderElementRepositoryMock.WineInOrder with params: %#v", *m.WineInOrderMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcWineInOrder != nil && mm_atomic.LoadUint64(&m.afterWineInOrderCounter) < 1 {
		m.t.Error("Expected call to IOrderElementRepositoryMock.WineInOrder")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *IOrderElementRepositoryMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockAddInspect()

		m.MinimockDecreaseInspect()

		m.MinimockDeleteInspect()

		m.MinimockGetByIDInspect()

		m.MinimockGetByOrderInspect()

		m.MinimockInsertInspect()

		m.MinimockWineInOrderInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *IOrderElementRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *IOrderElementRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockAddDone() &&
		m.MinimockDecreaseDone() &&
		m.MinimockDeleteDone() &&
		m.MinimockGetByIDDone() &&
		m.MinimockGetByOrderDone() &&
		m.MinimockInsertDone() &&
		m.MinimockWineInOrderDone()
}
