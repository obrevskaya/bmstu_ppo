package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i git.iu7.bmstu.ru/ovv20u676/ppo/src/internal/interfaces.IOrderController -o ../mocks/i_order_controller_mock_test.go -n IOrderControllerMock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"git.iu7.bmstu.ru/ovv20u676/ppo/src/backend/internal/logic/models"

	"github.com/gojuno/minimock/v3"
	"github.com/google/uuid"
)

// IOrderControllerMock implements interfaces.IOrderController
type IOrderControllerMock struct {
	t minimock.Tester

	funcCreate          func(ctx context.Context, order *models.Order) (err error)
	inspectFuncCreate   func(ctx context.Context, order *models.Order)
	afterCreateCounter  uint64
	beforeCreateCounter uint64
	CreateMock          mIOrderControllerMockCreate

	funcDelete          func(ctx context.Context, ID uuid.UUID) (err error)
	inspectFuncDelete   func(ctx context.Context, ID uuid.UUID)
	afterDeleteCounter  uint64
	beforeDeleteCounter uint64
	DeleteMock          mIOrderControllerMockDelete

	funcGetByID          func(ctx context.Context, ID uuid.UUID) (op1 *models.Order, err error)
	inspectFuncGetByID   func(ctx context.Context, ID uuid.UUID)
	afterGetByIDCounter  uint64
	beforeGetByIDCounter uint64
	GetByIDMock          mIOrderControllerMockGetByID

	funcGetByUserInProcess          func(ctx context.Context, ID uuid.UUID) (op1 *models.Order, err error)
	inspectFuncGetByUserInProcess   func(ctx context.Context, ID uuid.UUID)
	afterGetByUserInProcessCounter  uint64
	beforeGetByUserInProcessCounter uint64
	GetByUserInProcessMock          mIOrderControllerMockGetByUserInProcess

	funcUpdate          func(ctx context.Context, order *models.Order) (err error)
	inspectFuncUpdate   func(ctx context.Context, order *models.Order)
	afterUpdateCounter  uint64
	beforeUpdateCounter uint64
	UpdateMock          mIOrderControllerMockUpdate
}

// NewIOrderControllerMock returns a mock for interfaces.IOrderController
func NewIOrderControllerMock(t minimock.Tester) *IOrderControllerMock {
	m := &IOrderControllerMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateMock = mIOrderControllerMockCreate{mock: m}
	m.CreateMock.callArgs = []*IOrderControllerMockCreateParams{}

	m.DeleteMock = mIOrderControllerMockDelete{mock: m}
	m.DeleteMock.callArgs = []*IOrderControllerMockDeleteParams{}

	m.GetByIDMock = mIOrderControllerMockGetByID{mock: m}
	m.GetByIDMock.callArgs = []*IOrderControllerMockGetByIDParams{}

	m.GetByUserInProcessMock = mIOrderControllerMockGetByUserInProcess{mock: m}
	m.GetByUserInProcessMock.callArgs = []*IOrderControllerMockGetByUserInProcessParams{}

	m.UpdateMock = mIOrderControllerMockUpdate{mock: m}
	m.UpdateMock.callArgs = []*IOrderControllerMockUpdateParams{}

	return m
}

type mIOrderControllerMockCreate struct {
	mock               *IOrderControllerMock
	defaultExpectation *IOrderControllerMockCreateExpectation
	expectations       []*IOrderControllerMockCreateExpectation

	callArgs []*IOrderControllerMockCreateParams
	mutex    sync.RWMutex
}

// IOrderControllerMockCreateExpectation specifies expectation struct of the IOrderController.Create
type IOrderControllerMockCreateExpectation struct {
	mock    *IOrderControllerMock
	params  *IOrderControllerMockCreateParams
	results *IOrderControllerMockCreateResults
	Counter uint64
}

// IOrderControllerMockCreateParams contains parameters of the IOrderController.Create
type IOrderControllerMockCreateParams struct {
	ctx   context.Context
	order *models.Order
}

// IOrderControllerMockCreateResults contains results of the IOrderController.Create
type IOrderControllerMockCreateResults struct {
	err error
}

// Expect sets up expected params for IOrderController.Create
func (mmCreate *mIOrderControllerMockCreate) Expect(ctx context.Context, order *models.Order) *mIOrderControllerMockCreate {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("IOrderControllerMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &IOrderControllerMockCreateExpectation{}
	}

	mmCreate.defaultExpectation.params = &IOrderControllerMockCreateParams{ctx, order}
	for _, e := range mmCreate.expectations {
		if minimock.Equal(e.params, mmCreate.defaultExpectation.params) {
			mmCreate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreate.defaultExpectation.params)
		}
	}

	return mmCreate
}

// Inspect accepts an inspector function that has same arguments as the IOrderController.Create
func (mmCreate *mIOrderControllerMockCreate) Inspect(f func(ctx context.Context, order *models.Order)) *mIOrderControllerMockCreate {
	if mmCreate.mock.inspectFuncCreate != nil {
		mmCreate.mock.t.Fatalf("Inspect function is already set for IOrderControllerMock.Create")
	}

	mmCreate.mock.inspectFuncCreate = f

	return mmCreate
}

// Return sets up results that will be returned by IOrderController.Create
func (mmCreate *mIOrderControllerMockCreate) Return(err error) *IOrderControllerMock {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("IOrderControllerMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &IOrderControllerMockCreateExpectation{mock: mmCreate.mock}
	}
	mmCreate.defaultExpectation.results = &IOrderControllerMockCreateResults{err}
	return mmCreate.mock
}

// Set uses given function f to mock the IOrderController.Create method
func (mmCreate *mIOrderControllerMockCreate) Set(f func(ctx context.Context, order *models.Order) (err error)) *IOrderControllerMock {
	if mmCreate.defaultExpectation != nil {
		mmCreate.mock.t.Fatalf("Default expectation is already set for the IOrderController.Create method")
	}

	if len(mmCreate.expectations) > 0 {
		mmCreate.mock.t.Fatalf("Some expectations are already set for the IOrderController.Create method")
	}

	mmCreate.mock.funcCreate = f
	return mmCreate.mock
}

// When sets expectation for the IOrderController.Create which will trigger the result defined by the following
// Then helper
func (mmCreate *mIOrderControllerMockCreate) When(ctx context.Context, order *models.Order) *IOrderControllerMockCreateExpectation {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("IOrderControllerMock.Create mock is already set by Set")
	}

	expectation := &IOrderControllerMockCreateExpectation{
		mock:   mmCreate.mock,
		params: &IOrderControllerMockCreateParams{ctx, order},
	}
	mmCreate.expectations = append(mmCreate.expectations, expectation)
	return expectation
}

// Then sets up IOrderController.Create return parameters for the expectation previously defined by the When method
func (e *IOrderControllerMockCreateExpectation) Then(err error) *IOrderControllerMock {
	e.results = &IOrderControllerMockCreateResults{err}
	return e.mock
}

// Create implements interfaces.IOrderController
func (mmCreate *IOrderControllerMock) Create(ctx context.Context, order *models.Order) (err error) {
	mm_atomic.AddUint64(&mmCreate.beforeCreateCounter, 1)
	defer mm_atomic.AddUint64(&mmCreate.afterCreateCounter, 1)

	if mmCreate.inspectFuncCreate != nil {
		mmCreate.inspectFuncCreate(ctx, order)
	}

	mm_params := &IOrderControllerMockCreateParams{ctx, order}

	// Record call args
	mmCreate.CreateMock.mutex.Lock()
	mmCreate.CreateMock.callArgs = append(mmCreate.CreateMock.callArgs, mm_params)
	mmCreate.CreateMock.mutex.Unlock()

	for _, e := range mmCreate.CreateMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmCreate.CreateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreate.CreateMock.defaultExpectation.Counter, 1)
		mm_want := mmCreate.CreateMock.defaultExpectation.params
		mm_got := IOrderControllerMockCreateParams{ctx, order}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreate.t.Errorf("IOrderControllerMock.Create got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreate.CreateMock.defaultExpectation.results
		if mm_results == nil {
			mmCreate.t.Fatal("No results are set for the IOrderControllerMock.Create")
		}
		return (*mm_results).err
	}
	if mmCreate.funcCreate != nil {
		return mmCreate.funcCreate(ctx, order)
	}
	mmCreate.t.Fatalf("Unexpected call to IOrderControllerMock.Create. %v %v", ctx, order)
	return
}

// CreateAfterCounter returns a count of finished IOrderControllerMock.Create invocations
func (mmCreate *IOrderControllerMock) CreateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreate.afterCreateCounter)
}

// CreateBeforeCounter returns a count of IOrderControllerMock.Create invocations
func (mmCreate *IOrderControllerMock) CreateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreate.beforeCreateCounter)
}

// Calls returns a list of arguments used in each call to IOrderControllerMock.Create.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreate *mIOrderControllerMockCreate) Calls() []*IOrderControllerMockCreateParams {
	mmCreate.mutex.RLock()

	argCopy := make([]*IOrderControllerMockCreateParams, len(mmCreate.callArgs))
	copy(argCopy, mmCreate.callArgs)

	mmCreate.mutex.RUnlock()

	return argCopy
}

// MinimockCreateDone returns true if the count of the Create invocations corresponds
// the number of defined expectations
func (m *IOrderControllerMock) MinimockCreateDone() bool {
	for _, e := range m.CreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreate != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		return false
	}
	return true
}

// MinimockCreateInspect logs each unmet expectation
func (m *IOrderControllerMock) MinimockCreateInspect() {
	for _, e := range m.CreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to IOrderControllerMock.Create with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		if m.CreateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to IOrderControllerMock.Create")
		} else {
			m.t.Errorf("Expected call to IOrderControllerMock.Create with params: %#v", *m.CreateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreate != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		m.t.Error("Expected call to IOrderControllerMock.Create")
	}
}

type mIOrderControllerMockDelete struct {
	mock               *IOrderControllerMock
	defaultExpectation *IOrderControllerMockDeleteExpectation
	expectations       []*IOrderControllerMockDeleteExpectation

	callArgs []*IOrderControllerMockDeleteParams
	mutex    sync.RWMutex
}

// IOrderControllerMockDeleteExpectation specifies expectation struct of the IOrderController.Delete
type IOrderControllerMockDeleteExpectation struct {
	mock    *IOrderControllerMock
	params  *IOrderControllerMockDeleteParams
	results *IOrderControllerMockDeleteResults
	Counter uint64
}

// IOrderControllerMockDeleteParams contains parameters of the IOrderController.Delete
type IOrderControllerMockDeleteParams struct {
	ctx context.Context
	ID  uuid.UUID
}

// IOrderControllerMockDeleteResults contains results of the IOrderController.Delete
type IOrderControllerMockDeleteResults struct {
	err error
}

// Expect sets up expected params for IOrderController.Delete
func (mmDelete *mIOrderControllerMockDelete) Expect(ctx context.Context, ID uuid.UUID) *mIOrderControllerMockDelete {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("IOrderControllerMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &IOrderControllerMockDeleteExpectation{}
	}

	mmDelete.defaultExpectation.params = &IOrderControllerMockDeleteParams{ctx, ID}
	for _, e := range mmDelete.expectations {
		if minimock.Equal(e.params, mmDelete.defaultExpectation.params) {
			mmDelete.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDelete.defaultExpectation.params)
		}
	}

	return mmDelete
}

// Inspect accepts an inspector function that has same arguments as the IOrderController.Delete
func (mmDelete *mIOrderControllerMockDelete) Inspect(f func(ctx context.Context, ID uuid.UUID)) *mIOrderControllerMockDelete {
	if mmDelete.mock.inspectFuncDelete != nil {
		mmDelete.mock.t.Fatalf("Inspect function is already set for IOrderControllerMock.Delete")
	}

	mmDelete.mock.inspectFuncDelete = f

	return mmDelete
}

// Return sets up results that will be returned by IOrderController.Delete
func (mmDelete *mIOrderControllerMockDelete) Return(err error) *IOrderControllerMock {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("IOrderControllerMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &IOrderControllerMockDeleteExpectation{mock: mmDelete.mock}
	}
	mmDelete.defaultExpectation.results = &IOrderControllerMockDeleteResults{err}
	return mmDelete.mock
}

// Set uses given function f to mock the IOrderController.Delete method
func (mmDelete *mIOrderControllerMockDelete) Set(f func(ctx context.Context, ID uuid.UUID) (err error)) *IOrderControllerMock {
	if mmDelete.defaultExpectation != nil {
		mmDelete.mock.t.Fatalf("Default expectation is already set for the IOrderController.Delete method")
	}

	if len(mmDelete.expectations) > 0 {
		mmDelete.mock.t.Fatalf("Some expectations are already set for the IOrderController.Delete method")
	}

	mmDelete.mock.funcDelete = f
	return mmDelete.mock
}

// When sets expectation for the IOrderController.Delete which will trigger the result defined by the following
// Then helper
func (mmDelete *mIOrderControllerMockDelete) When(ctx context.Context, ID uuid.UUID) *IOrderControllerMockDeleteExpectation {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("IOrderControllerMock.Delete mock is already set by Set")
	}

	expectation := &IOrderControllerMockDeleteExpectation{
		mock:   mmDelete.mock,
		params: &IOrderControllerMockDeleteParams{ctx, ID},
	}
	mmDelete.expectations = append(mmDelete.expectations, expectation)
	return expectation
}

// Then sets up IOrderController.Delete return parameters for the expectation previously defined by the When method
func (e *IOrderControllerMockDeleteExpectation) Then(err error) *IOrderControllerMock {
	e.results = &IOrderControllerMockDeleteResults{err}
	return e.mock
}

// Delete implements interfaces.IOrderController
func (mmDelete *IOrderControllerMock) Delete(ctx context.Context, ID uuid.UUID) (err error) {
	mm_atomic.AddUint64(&mmDelete.beforeDeleteCounter, 1)
	defer mm_atomic.AddUint64(&mmDelete.afterDeleteCounter, 1)

	if mmDelete.inspectFuncDelete != nil {
		mmDelete.inspectFuncDelete(ctx, ID)
	}

	mm_params := &IOrderControllerMockDeleteParams{ctx, ID}

	// Record call args
	mmDelete.DeleteMock.mutex.Lock()
	mmDelete.DeleteMock.callArgs = append(mmDelete.DeleteMock.callArgs, mm_params)
	mmDelete.DeleteMock.mutex.Unlock()

	for _, e := range mmDelete.DeleteMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmDelete.DeleteMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDelete.DeleteMock.defaultExpectation.Counter, 1)
		mm_want := mmDelete.DeleteMock.defaultExpectation.params
		mm_got := IOrderControllerMockDeleteParams{ctx, ID}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDelete.t.Errorf("IOrderControllerMock.Delete got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDelete.DeleteMock.defaultExpectation.results
		if mm_results == nil {
			mmDelete.t.Fatal("No results are set for the IOrderControllerMock.Delete")
		}
		return (*mm_results).err
	}
	if mmDelete.funcDelete != nil {
		return mmDelete.funcDelete(ctx, ID)
	}
	mmDelete.t.Fatalf("Unexpected call to IOrderControllerMock.Delete. %v %v", ctx, ID)
	return
}

// DeleteAfterCounter returns a count of finished IOrderControllerMock.Delete invocations
func (mmDelete *IOrderControllerMock) DeleteAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDelete.afterDeleteCounter)
}

// DeleteBeforeCounter returns a count of IOrderControllerMock.Delete invocations
func (mmDelete *IOrderControllerMock) DeleteBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDelete.beforeDeleteCounter)
}

// Calls returns a list of arguments used in each call to IOrderControllerMock.Delete.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDelete *mIOrderControllerMockDelete) Calls() []*IOrderControllerMockDeleteParams {
	mmDelete.mutex.RLock()

	argCopy := make([]*IOrderControllerMockDeleteParams, len(mmDelete.callArgs))
	copy(argCopy, mmDelete.callArgs)

	mmDelete.mutex.RUnlock()

	return argCopy
}

// MinimockDeleteDone returns true if the count of the Delete invocations corresponds
// the number of defined expectations
func (m *IOrderControllerMock) MinimockDeleteDone() bool {
	for _, e := range m.DeleteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDeleteCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDelete != nil && mm_atomic.LoadUint64(&m.afterDeleteCounter) < 1 {
		return false
	}
	return true
}

// MinimockDeleteInspect logs each unmet expectation
func (m *IOrderControllerMock) MinimockDeleteInspect() {
	for _, e := range m.DeleteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to IOrderControllerMock.Delete with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDeleteCounter) < 1 {
		if m.DeleteMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to IOrderControllerMock.Delete")
		} else {
			m.t.Errorf("Expected call to IOrderControllerMock.Delete with params: %#v", *m.DeleteMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDelete != nil && mm_atomic.LoadUint64(&m.afterDeleteCounter) < 1 {
		m.t.Error("Expected call to IOrderControllerMock.Delete")
	}
}

type mIOrderControllerMockGetByID struct {
	mock               *IOrderControllerMock
	defaultExpectation *IOrderControllerMockGetByIDExpectation
	expectations       []*IOrderControllerMockGetByIDExpectation

	callArgs []*IOrderControllerMockGetByIDParams
	mutex    sync.RWMutex
}

// IOrderControllerMockGetByIDExpectation specifies expectation struct of the IOrderController.GetByID
type IOrderControllerMockGetByIDExpectation struct {
	mock    *IOrderControllerMock
	params  *IOrderControllerMockGetByIDParams
	results *IOrderControllerMockGetByIDResults
	Counter uint64
}

// IOrderControllerMockGetByIDParams contains parameters of the IOrderController.GetByID
type IOrderControllerMockGetByIDParams struct {
	ctx context.Context
	ID  uuid.UUID
}

// IOrderControllerMockGetByIDResults contains results of the IOrderController.GetByID
type IOrderControllerMockGetByIDResults struct {
	op1 *models.Order
	err error
}

// Expect sets up expected params for IOrderController.GetByID
func (mmGetByID *mIOrderControllerMockGetByID) Expect(ctx context.Context, ID uuid.UUID) *mIOrderControllerMockGetByID {
	if mmGetByID.mock.funcGetByID != nil {
		mmGetByID.mock.t.Fatalf("IOrderControllerMock.GetByID mock is already set by Set")
	}

	if mmGetByID.defaultExpectation == nil {
		mmGetByID.defaultExpectation = &IOrderControllerMockGetByIDExpectation{}
	}

	mmGetByID.defaultExpectation.params = &IOrderControllerMockGetByIDParams{ctx, ID}
	for _, e := range mmGetByID.expectations {
		if minimock.Equal(e.params, mmGetByID.defaultExpectation.params) {
			mmGetByID.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetByID.defaultExpectation.params)
		}
	}

	return mmGetByID
}

// Inspect accepts an inspector function that has same arguments as the IOrderController.GetByID
func (mmGetByID *mIOrderControllerMockGetByID) Inspect(f func(ctx context.Context, ID uuid.UUID)) *mIOrderControllerMockGetByID {
	if mmGetByID.mock.inspectFuncGetByID != nil {
		mmGetByID.mock.t.Fatalf("Inspect function is already set for IOrderControllerMock.GetByID")
	}

	mmGetByID.mock.inspectFuncGetByID = f

	return mmGetByID
}

// Return sets up results that will be returned by IOrderController.GetByID
func (mmGetByID *mIOrderControllerMockGetByID) Return(op1 *models.Order, err error) *IOrderControllerMock {
	if mmGetByID.mock.funcGetByID != nil {
		mmGetByID.mock.t.Fatalf("IOrderControllerMock.GetByID mock is already set by Set")
	}

	if mmGetByID.defaultExpectation == nil {
		mmGetByID.defaultExpectation = &IOrderControllerMockGetByIDExpectation{mock: mmGetByID.mock}
	}
	mmGetByID.defaultExpectation.results = &IOrderControllerMockGetByIDResults{op1, err}
	return mmGetByID.mock
}

// Set uses given function f to mock the IOrderController.GetByID method
func (mmGetByID *mIOrderControllerMockGetByID) Set(f func(ctx context.Context, ID uuid.UUID) (op1 *models.Order, err error)) *IOrderControllerMock {
	if mmGetByID.defaultExpectation != nil {
		mmGetByID.mock.t.Fatalf("Default expectation is already set for the IOrderController.GetByID method")
	}

	if len(mmGetByID.expectations) > 0 {
		mmGetByID.mock.t.Fatalf("Some expectations are already set for the IOrderController.GetByID method")
	}

	mmGetByID.mock.funcGetByID = f
	return mmGetByID.mock
}

// When sets expectation for the IOrderController.GetByID which will trigger the result defined by the following
// Then helper
func (mmGetByID *mIOrderControllerMockGetByID) When(ctx context.Context, ID uuid.UUID) *IOrderControllerMockGetByIDExpectation {
	if mmGetByID.mock.funcGetByID != nil {
		mmGetByID.mock.t.Fatalf("IOrderControllerMock.GetByID mock is already set by Set")
	}

	expectation := &IOrderControllerMockGetByIDExpectation{
		mock:   mmGetByID.mock,
		params: &IOrderControllerMockGetByIDParams{ctx, ID},
	}
	mmGetByID.expectations = append(mmGetByID.expectations, expectation)
	return expectation
}

// Then sets up IOrderController.GetByID return parameters for the expectation previously defined by the When method
func (e *IOrderControllerMockGetByIDExpectation) Then(op1 *models.Order, err error) *IOrderControllerMock {
	e.results = &IOrderControllerMockGetByIDResults{op1, err}
	return e.mock
}

// GetByID implements interfaces.IOrderController
func (mmGetByID *IOrderControllerMock) GetByID(ctx context.Context, ID uuid.UUID) (op1 *models.Order, err error) {
	mm_atomic.AddUint64(&mmGetByID.beforeGetByIDCounter, 1)
	defer mm_atomic.AddUint64(&mmGetByID.afterGetByIDCounter, 1)

	if mmGetByID.inspectFuncGetByID != nil {
		mmGetByID.inspectFuncGetByID(ctx, ID)
	}

	mm_params := &IOrderControllerMockGetByIDParams{ctx, ID}

	// Record call args
	mmGetByID.GetByIDMock.mutex.Lock()
	mmGetByID.GetByIDMock.callArgs = append(mmGetByID.GetByIDMock.callArgs, mm_params)
	mmGetByID.GetByIDMock.mutex.Unlock()

	for _, e := range mmGetByID.GetByIDMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.op1, e.results.err
		}
	}

	if mmGetByID.GetByIDMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetByID.GetByIDMock.defaultExpectation.Counter, 1)
		mm_want := mmGetByID.GetByIDMock.defaultExpectation.params
		mm_got := IOrderControllerMockGetByIDParams{ctx, ID}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetByID.t.Errorf("IOrderControllerMock.GetByID got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetByID.GetByIDMock.defaultExpectation.results
		if mm_results == nil {
			mmGetByID.t.Fatal("No results are set for the IOrderControllerMock.GetByID")
		}
		return (*mm_results).op1, (*mm_results).err
	}
	if mmGetByID.funcGetByID != nil {
		return mmGetByID.funcGetByID(ctx, ID)
	}
	mmGetByID.t.Fatalf("Unexpected call to IOrderControllerMock.GetByID. %v %v", ctx, ID)
	return
}

// GetByIDAfterCounter returns a count of finished IOrderControllerMock.GetByID invocations
func (mmGetByID *IOrderControllerMock) GetByIDAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetByID.afterGetByIDCounter)
}

// GetByIDBeforeCounter returns a count of IOrderControllerMock.GetByID invocations
func (mmGetByID *IOrderControllerMock) GetByIDBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetByID.beforeGetByIDCounter)
}

// Calls returns a list of arguments used in each call to IOrderControllerMock.GetByID.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetByID *mIOrderControllerMockGetByID) Calls() []*IOrderControllerMockGetByIDParams {
	mmGetByID.mutex.RLock()

	argCopy := make([]*IOrderControllerMockGetByIDParams, len(mmGetByID.callArgs))
	copy(argCopy, mmGetByID.callArgs)

	mmGetByID.mutex.RUnlock()

	return argCopy
}

// MinimockGetByIDDone returns true if the count of the GetByID invocations corresponds
// the number of defined expectations
func (m *IOrderControllerMock) MinimockGetByIDDone() bool {
	for _, e := range m.GetByIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetByIDMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetByIDCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetByID != nil && mm_atomic.LoadUint64(&m.afterGetByIDCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetByIDInspect logs each unmet expectation
func (m *IOrderControllerMock) MinimockGetByIDInspect() {
	for _, e := range m.GetByIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to IOrderControllerMock.GetByID with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetByIDMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetByIDCounter) < 1 {
		if m.GetByIDMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to IOrderControllerMock.GetByID")
		} else {
			m.t.Errorf("Expected call to IOrderControllerMock.GetByID with params: %#v", *m.GetByIDMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetByID != nil && mm_atomic.LoadUint64(&m.afterGetByIDCounter) < 1 {
		m.t.Error("Expected call to IOrderControllerMock.GetByID")
	}
}

type mIOrderControllerMockGetByUserInProcess struct {
	mock               *IOrderControllerMock
	defaultExpectation *IOrderControllerMockGetByUserInProcessExpectation
	expectations       []*IOrderControllerMockGetByUserInProcessExpectation

	callArgs []*IOrderControllerMockGetByUserInProcessParams
	mutex    sync.RWMutex
}

// IOrderControllerMockGetByUserInProcessExpectation specifies expectation struct of the IOrderController.GetByUserInProcess
type IOrderControllerMockGetByUserInProcessExpectation struct {
	mock    *IOrderControllerMock
	params  *IOrderControllerMockGetByUserInProcessParams
	results *IOrderControllerMockGetByUserInProcessResults
	Counter uint64
}

// IOrderControllerMockGetByUserInProcessParams contains parameters of the IOrderController.GetByUserInProcess
type IOrderControllerMockGetByUserInProcessParams struct {
	ctx context.Context
	ID  uuid.UUID
}

// IOrderControllerMockGetByUserInProcessResults contains results of the IOrderController.GetByUserInProcess
type IOrderControllerMockGetByUserInProcessResults struct {
	op1 *models.Order
	err error
}

// Expect sets up expected params for IOrderController.GetByUserInProcess
func (mmGetByUserInProcess *mIOrderControllerMockGetByUserInProcess) Expect(ctx context.Context, ID uuid.UUID) *mIOrderControllerMockGetByUserInProcess {
	if mmGetByUserInProcess.mock.funcGetByUserInProcess != nil {
		mmGetByUserInProcess.mock.t.Fatalf("IOrderControllerMock.GetByUserInProcess mock is already set by Set")
	}

	if mmGetByUserInProcess.defaultExpectation == nil {
		mmGetByUserInProcess.defaultExpectation = &IOrderControllerMockGetByUserInProcessExpectation{}
	}

	mmGetByUserInProcess.defaultExpectation.params = &IOrderControllerMockGetByUserInProcessParams{ctx, ID}
	for _, e := range mmGetByUserInProcess.expectations {
		if minimock.Equal(e.params, mmGetByUserInProcess.defaultExpectation.params) {
			mmGetByUserInProcess.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetByUserInProcess.defaultExpectation.params)
		}
	}

	return mmGetByUserInProcess
}

// Inspect accepts an inspector function that has same arguments as the IOrderController.GetByUserInProcess
func (mmGetByUserInProcess *mIOrderControllerMockGetByUserInProcess) Inspect(f func(ctx context.Context, ID uuid.UUID)) *mIOrderControllerMockGetByUserInProcess {
	if mmGetByUserInProcess.mock.inspectFuncGetByUserInProcess != nil {
		mmGetByUserInProcess.mock.t.Fatalf("Inspect function is already set for IOrderControllerMock.GetByUserInProcess")
	}

	mmGetByUserInProcess.mock.inspectFuncGetByUserInProcess = f

	return mmGetByUserInProcess
}

// Return sets up results that will be returned by IOrderController.GetByUserInProcess
func (mmGetByUserInProcess *mIOrderControllerMockGetByUserInProcess) Return(op1 *models.Order, err error) *IOrderControllerMock {
	if mmGetByUserInProcess.mock.funcGetByUserInProcess != nil {
		mmGetByUserInProcess.mock.t.Fatalf("IOrderControllerMock.GetByUserInProcess mock is already set by Set")
	}

	if mmGetByUserInProcess.defaultExpectation == nil {
		mmGetByUserInProcess.defaultExpectation = &IOrderControllerMockGetByUserInProcessExpectation{mock: mmGetByUserInProcess.mock}
	}
	mmGetByUserInProcess.defaultExpectation.results = &IOrderControllerMockGetByUserInProcessResults{op1, err}
	return mmGetByUserInProcess.mock
}

// Set uses given function f to mock the IOrderController.GetByUserInProcess method
func (mmGetByUserInProcess *mIOrderControllerMockGetByUserInProcess) Set(f func(ctx context.Context, ID uuid.UUID) (op1 *models.Order, err error)) *IOrderControllerMock {
	if mmGetByUserInProcess.defaultExpectation != nil {
		mmGetByUserInProcess.mock.t.Fatalf("Default expectation is already set for the IOrderController.GetByUserInProcess method")
	}

	if len(mmGetByUserInProcess.expectations) > 0 {
		mmGetByUserInProcess.mock.t.Fatalf("Some expectations are already set for the IOrderController.GetByUserInProcess method")
	}

	mmGetByUserInProcess.mock.funcGetByUserInProcess = f
	return mmGetByUserInProcess.mock
}

// When sets expectation for the IOrderController.GetByUserInProcess which will trigger the result defined by the following
// Then helper
func (mmGetByUserInProcess *mIOrderControllerMockGetByUserInProcess) When(ctx context.Context, ID uuid.UUID) *IOrderControllerMockGetByUserInProcessExpectation {
	if mmGetByUserInProcess.mock.funcGetByUserInProcess != nil {
		mmGetByUserInProcess.mock.t.Fatalf("IOrderControllerMock.GetByUserInProcess mock is already set by Set")
	}

	expectation := &IOrderControllerMockGetByUserInProcessExpectation{
		mock:   mmGetByUserInProcess.mock,
		params: &IOrderControllerMockGetByUserInProcessParams{ctx, ID},
	}
	mmGetByUserInProcess.expectations = append(mmGetByUserInProcess.expectations, expectation)
	return expectation
}

// Then sets up IOrderController.GetByUserInProcess return parameters for the expectation previously defined by the When method
func (e *IOrderControllerMockGetByUserInProcessExpectation) Then(op1 *models.Order, err error) *IOrderControllerMock {
	e.results = &IOrderControllerMockGetByUserInProcessResults{op1, err}
	return e.mock
}

// GetByUserInProcess implements interfaces.IOrderController
func (mmGetByUserInProcess *IOrderControllerMock) GetByUserInProcess(ctx context.Context, ID uuid.UUID) (op1 *models.Order, err error) {
	mm_atomic.AddUint64(&mmGetByUserInProcess.beforeGetByUserInProcessCounter, 1)
	defer mm_atomic.AddUint64(&mmGetByUserInProcess.afterGetByUserInProcessCounter, 1)

	if mmGetByUserInProcess.inspectFuncGetByUserInProcess != nil {
		mmGetByUserInProcess.inspectFuncGetByUserInProcess(ctx, ID)
	}

	mm_params := &IOrderControllerMockGetByUserInProcessParams{ctx, ID}

	// Record call args
	mmGetByUserInProcess.GetByUserInProcessMock.mutex.Lock()
	mmGetByUserInProcess.GetByUserInProcessMock.callArgs = append(mmGetByUserInProcess.GetByUserInProcessMock.callArgs, mm_params)
	mmGetByUserInProcess.GetByUserInProcessMock.mutex.Unlock()

	for _, e := range mmGetByUserInProcess.GetByUserInProcessMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.op1, e.results.err
		}
	}

	if mmGetByUserInProcess.GetByUserInProcessMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetByUserInProcess.GetByUserInProcessMock.defaultExpectation.Counter, 1)
		mm_want := mmGetByUserInProcess.GetByUserInProcessMock.defaultExpectation.params
		mm_got := IOrderControllerMockGetByUserInProcessParams{ctx, ID}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetByUserInProcess.t.Errorf("IOrderControllerMock.GetByUserInProcess got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetByUserInProcess.GetByUserInProcessMock.defaultExpectation.results
		if mm_results == nil {
			mmGetByUserInProcess.t.Fatal("No results are set for the IOrderControllerMock.GetByUserInProcess")
		}
		return (*mm_results).op1, (*mm_results).err
	}
	if mmGetByUserInProcess.funcGetByUserInProcess != nil {
		return mmGetByUserInProcess.funcGetByUserInProcess(ctx, ID)
	}
	mmGetByUserInProcess.t.Fatalf("Unexpected call to IOrderControllerMock.GetByUserInProcess. %v %v", ctx, ID)
	return
}

// GetByUserInProcessAfterCounter returns a count of finished IOrderControllerMock.GetByUserInProcess invocations
func (mmGetByUserInProcess *IOrderControllerMock) GetByUserInProcessAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetByUserInProcess.afterGetByUserInProcessCounter)
}

// GetByUserInProcessBeforeCounter returns a count of IOrderControllerMock.GetByUserInProcess invocations
func (mmGetByUserInProcess *IOrderControllerMock) GetByUserInProcessBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetByUserInProcess.beforeGetByUserInProcessCounter)
}

// Calls returns a list of arguments used in each call to IOrderControllerMock.GetByUserInProcess.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetByUserInProcess *mIOrderControllerMockGetByUserInProcess) Calls() []*IOrderControllerMockGetByUserInProcessParams {
	mmGetByUserInProcess.mutex.RLock()

	argCopy := make([]*IOrderControllerMockGetByUserInProcessParams, len(mmGetByUserInProcess.callArgs))
	copy(argCopy, mmGetByUserInProcess.callArgs)

	mmGetByUserInProcess.mutex.RUnlock()

	return argCopy
}

// MinimockGetByUserInProcessDone returns true if the count of the GetByUserInProcess invocations corresponds
// the number of defined expectations
func (m *IOrderControllerMock) MinimockGetByUserInProcessDone() bool {
	for _, e := range m.GetByUserInProcessMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetByUserInProcessMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetByUserInProcessCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetByUserInProcess != nil && mm_atomic.LoadUint64(&m.afterGetByUserInProcessCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetByUserInProcessInspect logs each unmet expectation
func (m *IOrderControllerMock) MinimockGetByUserInProcessInspect() {
	for _, e := range m.GetByUserInProcessMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to IOrderControllerMock.GetByUserInProcess with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetByUserInProcessMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetByUserInProcessCounter) < 1 {
		if m.GetByUserInProcessMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to IOrderControllerMock.GetByUserInProcess")
		} else {
			m.t.Errorf("Expected call to IOrderControllerMock.GetByUserInProcess with params: %#v", *m.GetByUserInProcessMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetByUserInProcess != nil && mm_atomic.LoadUint64(&m.afterGetByUserInProcessCounter) < 1 {
		m.t.Error("Expected call to IOrderControllerMock.GetByUserInProcess")
	}
}

type mIOrderControllerMockUpdate struct {
	mock               *IOrderControllerMock
	defaultExpectation *IOrderControllerMockUpdateExpectation
	expectations       []*IOrderControllerMockUpdateExpectation

	callArgs []*IOrderControllerMockUpdateParams
	mutex    sync.RWMutex
}

// IOrderControllerMockUpdateExpectation specifies expectation struct of the IOrderController.Update
type IOrderControllerMockUpdateExpectation struct {
	mock    *IOrderControllerMock
	params  *IOrderControllerMockUpdateParams
	results *IOrderControllerMockUpdateResults
	Counter uint64
}

// IOrderControllerMockUpdateParams contains parameters of the IOrderController.Update
type IOrderControllerMockUpdateParams struct {
	ctx   context.Context
	order *models.Order
}

// IOrderControllerMockUpdateResults contains results of the IOrderController.Update
type IOrderControllerMockUpdateResults struct {
	err error
}

// Expect sets up expected params for IOrderController.Update
func (mmUpdate *mIOrderControllerMockUpdate) Expect(ctx context.Context, order *models.Order) *mIOrderControllerMockUpdate {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("IOrderControllerMock.Update mock is already set by Set")
	}

	if mmUpdate.defaultExpectation == nil {
		mmUpdate.defaultExpectation = &IOrderControllerMockUpdateExpectation{}
	}

	mmUpdate.defaultExpectation.params = &IOrderControllerMockUpdateParams{ctx, order}
	for _, e := range mmUpdate.expectations {
		if minimock.Equal(e.params, mmUpdate.defaultExpectation.params) {
			mmUpdate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpdate.defaultExpectation.params)
		}
	}

	return mmUpdate
}

// Inspect accepts an inspector function that has same arguments as the IOrderController.Update
func (mmUpdate *mIOrderControllerMockUpdate) Inspect(f func(ctx context.Context, order *models.Order)) *mIOrderControllerMockUpdate {
	if mmUpdate.mock.inspectFuncUpdate != nil {
		mmUpdate.mock.t.Fatalf("Inspect function is already set for IOrderControllerMock.Update")
	}

	mmUpdate.mock.inspectFuncUpdate = f

	return mmUpdate
}

// Return sets up results that will be returned by IOrderController.Update
func (mmUpdate *mIOrderControllerMockUpdate) Return(err error) *IOrderControllerMock {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("IOrderControllerMock.Update mock is already set by Set")
	}

	if mmUpdate.defaultExpectation == nil {
		mmUpdate.defaultExpectation = &IOrderControllerMockUpdateExpectation{mock: mmUpdate.mock}
	}
	mmUpdate.defaultExpectation.results = &IOrderControllerMockUpdateResults{err}
	return mmUpdate.mock
}

// Set uses given function f to mock the IOrderController.Update method
func (mmUpdate *mIOrderControllerMockUpdate) Set(f func(ctx context.Context, order *models.Order) (err error)) *IOrderControllerMock {
	if mmUpdate.defaultExpectation != nil {
		mmUpdate.mock.t.Fatalf("Default expectation is already set for the IOrderController.Update method")
	}

	if len(mmUpdate.expectations) > 0 {
		mmUpdate.mock.t.Fatalf("Some expectations are already set for the IOrderController.Update method")
	}

	mmUpdate.mock.funcUpdate = f
	return mmUpdate.mock
}

// When sets expectation for the IOrderController.Update which will trigger the result defined by the following
// Then helper
func (mmUpdate *mIOrderControllerMockUpdate) When(ctx context.Context, order *models.Order) *IOrderControllerMockUpdateExpectation {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("IOrderControllerMock.Update mock is already set by Set")
	}

	expectation := &IOrderControllerMockUpdateExpectation{
		mock:   mmUpdate.mock,
		params: &IOrderControllerMockUpdateParams{ctx, order},
	}
	mmUpdate.expectations = append(mmUpdate.expectations, expectation)
	return expectation
}

// Then sets up IOrderController.Update return parameters for the expectation previously defined by the When method
func (e *IOrderControllerMockUpdateExpectation) Then(err error) *IOrderControllerMock {
	e.results = &IOrderControllerMockUpdateResults{err}
	return e.mock
}

// Update implements interfaces.IOrderController
func (mmUpdate *IOrderControllerMock) Update(ctx context.Context, order *models.Order) (err error) {
	mm_atomic.AddUint64(&mmUpdate.beforeUpdateCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdate.afterUpdateCounter, 1)

	if mmUpdate.inspectFuncUpdate != nil {
		mmUpdate.inspectFuncUpdate(ctx, order)
	}

	mm_params := &IOrderControllerMockUpdateParams{ctx, order}

	// Record call args
	mmUpdate.UpdateMock.mutex.Lock()
	mmUpdate.UpdateMock.callArgs = append(mmUpdate.UpdateMock.callArgs, mm_params)
	mmUpdate.UpdateMock.mutex.Unlock()

	for _, e := range mmUpdate.UpdateMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmUpdate.UpdateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdate.UpdateMock.defaultExpectation.Counter, 1)
		mm_want := mmUpdate.UpdateMock.defaultExpectation.params
		mm_got := IOrderControllerMockUpdateParams{ctx, order}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUpdate.t.Errorf("IOrderControllerMock.Update got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUpdate.UpdateMock.defaultExpectation.results
		if mm_results == nil {
			mmUpdate.t.Fatal("No results are set for the IOrderControllerMock.Update")
		}
		return (*mm_results).err
	}
	if mmUpdate.funcUpdate != nil {
		return mmUpdate.funcUpdate(ctx, order)
	}
	mmUpdate.t.Fatalf("Unexpected call to IOrderControllerMock.Update. %v %v", ctx, order)
	return
}

// UpdateAfterCounter returns a count of finished IOrderControllerMock.Update invocations
func (mmUpdate *IOrderControllerMock) UpdateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdate.afterUpdateCounter)
}

// UpdateBeforeCounter returns a count of IOrderControllerMock.Update invocations
func (mmUpdate *IOrderControllerMock) UpdateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdate.beforeUpdateCounter)
}

// Calls returns a list of arguments used in each call to IOrderControllerMock.Update.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpdate *mIOrderControllerMockUpdate) Calls() []*IOrderControllerMockUpdateParams {
	mmUpdate.mutex.RLock()

	argCopy := make([]*IOrderControllerMockUpdateParams, len(mmUpdate.callArgs))
	copy(argCopy, mmUpdate.callArgs)

	mmUpdate.mutex.RUnlock()

	return argCopy
}

// MinimockUpdateDone returns true if the count of the Update invocations corresponds
// the number of defined expectations
func (m *IOrderControllerMock) MinimockUpdateDone() bool {
	for _, e := range m.UpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdate != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		return false
	}
	return true
}

// MinimockUpdateInspect logs each unmet expectation
func (m *IOrderControllerMock) MinimockUpdateInspect() {
	for _, e := range m.UpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to IOrderControllerMock.Update with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		if m.UpdateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to IOrderControllerMock.Update")
		} else {
			m.t.Errorf("Expected call to IOrderControllerMock.Update with params: %#v", *m.UpdateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdate != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		m.t.Error("Expected call to IOrderControllerMock.Update")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *IOrderControllerMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockCreateInspect()

		m.MinimockDeleteInspect()

		m.MinimockGetByIDInspect()

		m.MinimockGetByUserInProcessInspect()

		m.MinimockUpdateInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *IOrderControllerMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *IOrderControllerMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateDone() &&
		m.MinimockDeleteDone() &&
		m.MinimockGetByIDDone() &&
		m.MinimockGetByUserInProcessDone() &&
		m.MinimockUpdateDone()
}
